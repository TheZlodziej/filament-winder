
TestProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e08  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003fd0  08003fd0  00013fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ff8  08003ff8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ff8  08003ff8  00013ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004000  08004000  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004000  08004000  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004004  08004004  00014004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005fc  2000000c  08004014  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000608  08004014  00020608  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d9d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000283e  00000000  00000000  00034dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  00037618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f50  00000000  00000000  00038650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002995b  00000000  00000000  000395a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f63  00000000  00000000  00062efb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7949  00000000  00000000  00076e5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016e7a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004544  00000000  00000000  0016e7f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003fb8 	.word	0x08003fb8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08003fb8 	.word	0x08003fb8

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b0a0      	sub	sp, #128	; 0x80
 8000510:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f000 fd46 	bl	8000fa2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f86b 	bl	80005f0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051a:	f000 f9a3 	bl	8000864 <_ZL12MX_GPIO_Initv>
  MX_USART3_UART_Init();
 800051e:	f000 f93b 	bl	8000798 <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8000522:	f000 f96d 	bl	8000800 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_TIM1_Init();
 8000526:	f000 f8d5 	bl	80006d4 <_ZL12MX_TIM1_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800052a:	482e      	ldr	r0, [pc, #184]	; (80005e4 <main+0xd8>)
 800052c:	f002 fad0 	bl	8002ad0 <HAL_TIM_Base_Start>
  uint16_t steps = 25600;
 8000530:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8000534:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
  //StepperMotor sm(htim1, steps, { GPIOC, GPIO_PIN_6}, { GPIOB, GPIO_PIN_8 }, { GPIOB, GPIO_PIN_15 }, { GPIOB, GPIO_PIN_9 });
	//sm.StepperMotor_SetSpeed(20);
  MicrostepDriverController ctrl({steps}, htim1, {GPIOC, GPIO_PIN_6}, {GPIOB, GPIO_PIN_8});
 8000538:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800053c:	643b      	str	r3, [r7, #64]	; 0x40
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	f04f 0300 	mov.w	r3, #0
 8000546:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	f04f 0300 	mov.w	r3, #0
 8000552:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8000556:	f04f 0205 	mov.w	r2, #5
 800055a:	f04f 0300 	mov.w	r3, #0
 800055e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8000562:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <main+0xdc>)
 8000564:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000568:	e892 0003 	ldmia.w	r2, {r0, r1}
 800056c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000570:	4a1e      	ldr	r2, [pc, #120]	; (80005ec <main+0xe0>)
 8000572:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000576:	e892 0003 	ldmia.w	r2, {r0, r1}
 800057a:	e883 0003 	stmia.w	r3, {r0, r1}
 800057e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000582:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000586:	4638      	mov	r0, r7
 8000588:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	4613      	mov	r3, r2
 8000590:	4a14      	ldr	r2, [pc, #80]	; (80005e4 <main+0xd8>)
 8000592:	f000 fa74 	bl	8000a7e <_ZN25MicrostepDriverControllerC1ERKNS_13SpecificationER17TIM_HandleTypeDefRKNS_13GPIO_Pin_PairES7_>
  ctrl.set_speed(500);
 8000596:	463b      	mov	r3, r7
 8000598:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800059c:	4618      	mov	r0, r3
 800059e:	f000 fa9d 	bl	8000adc <_ZN25MicrostepDriverController9set_speedEt>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  ctrl.set_direction(MicrostepDriverController::Direction::RIGHT);
 80005a2:	463b      	mov	r3, r7
 80005a4:	2101      	movs	r1, #1
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 fabe 	bl	8000b28 <_ZN25MicrostepDriverController13set_directionENS_9DirectionE>
	  ctrl.send_pulse(steps);
 80005ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80005b0:	463b      	mov	r3, r7
 80005b2:	4611      	mov	r1, r2
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 fad4 	bl	8000b62 <_ZN25MicrostepDriverController10send_pulseEt>
	  HAL_Delay(500);
 80005ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005be:	f000 fd4d 	bl	800105c <HAL_Delay>
	  /* USER CODE BEGIN 3 */
	  ctrl.set_direction(MicrostepDriverController::Direction::LEFT);
 80005c2:	463b      	mov	r3, r7
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 faae 	bl	8000b28 <_ZN25MicrostepDriverController13set_directionENS_9DirectionE>
	  ctrl.send_pulse(steps);
 80005cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80005d0:	463b      	mov	r3, r7
 80005d2:	4611      	mov	r1, r2
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 fac4 	bl	8000b62 <_ZN25MicrostepDriverController10send_pulseEt>
      HAL_Delay(500);
 80005da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005de:	f000 fd3d 	bl	800105c <HAL_Delay>
	  ctrl.set_direction(MicrostepDriverController::Direction::RIGHT);
 80005e2:	e7de      	b.n	80005a2 <main+0x96>
 80005e4:	20000028 	.word	0x20000028
 80005e8:	08003fd0 	.word	0x08003fd0
 80005ec:	08003fd8 	.word	0x08003fd8

080005f0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	; 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f003 fcd2 	bl	8003fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000614:	f001 f93a 	bl	800188c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	4b2c      	ldr	r3, [pc, #176]	; (80006cc <_Z18SystemClock_Configv+0xdc>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	4a2b      	ldr	r2, [pc, #172]	; (80006cc <_Z18SystemClock_Configv+0xdc>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	; 0x40
 8000624:	4b29      	ldr	r3, [pc, #164]	; (80006cc <_Z18SystemClock_Configv+0xdc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000630:	4b27      	ldr	r3, [pc, #156]	; (80006d0 <_Z18SystemClock_Configv+0xe0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000638:	4a25      	ldr	r2, [pc, #148]	; (80006d0 <_Z18SystemClock_Configv+0xe0>)
 800063a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b23      	ldr	r3, [pc, #140]	; (80006d0 <_Z18SystemClock_Configv+0xe0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064c:	2301      	movs	r3, #1
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000650:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000656:	2302      	movs	r3, #2
 8000658:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800065e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000660:	2304      	movs	r3, #4
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000664:	2348      	movs	r3, #72	; 0x48
 8000666:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800066c:	2303      	movs	r3, #3
 800066e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0320 	add.w	r3, r7, #32
 8000674:	4618      	mov	r0, r3
 8000676:	f001 f919 	bl	80018ac <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	bf14      	ite	ne
 8000680:	2301      	movne	r3, #1
 8000682:	2300      	moveq	r3, #0
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800068a:	f000 f9f3 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068e:	230f      	movs	r3, #15
 8000690:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000692:	2302      	movs	r3, #2
 8000694:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800069a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2102      	movs	r1, #2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 fba2 	bl	8001df4 <HAL_RCC_ClockConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	bf14      	ite	ne
 80006b6:	2301      	movne	r3, #1
 80006b8:	2300      	moveq	r3, #0
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80006c0:	f000 f9d8 	bl	8000a74 <Error_Handler>
  }
}
 80006c4:	bf00      	nop
 80006c6:	3750      	adds	r7, #80	; 0x50
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006da:	f107 0310 	add.w	r3, r7, #16
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006f2:	4b27      	ldr	r3, [pc, #156]	; (8000790 <_ZL12MX_TIM1_Initv+0xbc>)
 80006f4:	4a27      	ldr	r2, [pc, #156]	; (8000794 <_ZL12MX_TIM1_Initv+0xc0>)
 80006f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80006f8:	4b25      	ldr	r3, [pc, #148]	; (8000790 <_ZL12MX_TIM1_Initv+0xbc>)
 80006fa:	2247      	movs	r2, #71	; 0x47
 80006fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fe:	4b24      	ldr	r3, [pc, #144]	; (8000790 <_ZL12MX_TIM1_Initv+0xbc>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <_ZL12MX_TIM1_Initv+0xbc>)
 8000706:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800070a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800070c:	4b20      	ldr	r3, [pc, #128]	; (8000790 <_ZL12MX_TIM1_Initv+0xbc>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000712:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <_ZL12MX_TIM1_Initv+0xbc>)
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000718:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <_ZL12MX_TIM1_Initv+0xbc>)
 800071a:	2200      	movs	r2, #0
 800071c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800071e:	481c      	ldr	r0, [pc, #112]	; (8000790 <_ZL12MX_TIM1_Initv+0xbc>)
 8000720:	f002 f97e 	bl	8002a20 <HAL_TIM_Base_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	bf14      	ite	ne
 800072a:	2301      	movne	r3, #1
 800072c:	2300      	moveq	r3, #0
 800072e:	b2db      	uxtb	r3, r3
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 8000734:	f000 f99e 	bl	8000a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800073e:	f107 0310 	add.w	r3, r7, #16
 8000742:	4619      	mov	r1, r3
 8000744:	4812      	ldr	r0, [pc, #72]	; (8000790 <_ZL12MX_TIM1_Initv+0xbc>)
 8000746:	f002 fa33 	bl	8002bb0 <HAL_TIM_ConfigClockSource>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	bf14      	ite	ne
 8000750:	2301      	movne	r3, #1
 8000752:	2300      	moveq	r3, #0
 8000754:	b2db      	uxtb	r3, r3
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 800075a:	f000 f98b 	bl	8000a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	4619      	mov	r1, r3
 800076e:	4808      	ldr	r0, [pc, #32]	; (8000790 <_ZL12MX_TIM1_Initv+0xbc>)
 8000770:	f002 fc22 	bl	8002fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	bf14      	ite	ne
 800077a:	2301      	movne	r3, #1
 800077c:	2300      	moveq	r3, #0
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <_ZL12MX_TIM1_Initv+0xb4>
  {
    Error_Handler();
 8000784:	f000 f976 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	3720      	adds	r7, #32
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000028 	.word	0x20000028
 8000794:	40010000 	.word	0x40010000

08000798 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800079c:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <_ZL19MX_USART3_UART_Initv+0x60>)
 800079e:	4a17      	ldr	r2, [pc, #92]	; (80007fc <_ZL19MX_USART3_UART_Initv+0x64>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <_ZL19MX_USART3_UART_Initv+0x60>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <_ZL19MX_USART3_UART_Initv+0x60>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <_ZL19MX_USART3_UART_Initv+0x60>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <_ZL19MX_USART3_UART_Initv+0x60>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <_ZL19MX_USART3_UART_Initv+0x60>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <_ZL19MX_USART3_UART_Initv+0x60>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <_ZL19MX_USART3_UART_Initv+0x60>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ce:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <_ZL19MX_USART3_UART_Initv+0x60>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <_ZL19MX_USART3_UART_Initv+0x60>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007da:	4807      	ldr	r0, [pc, #28]	; (80007f8 <_ZL19MX_USART3_UART_Initv+0x60>)
 80007dc:	f002 fc7a 	bl	80030d4 <HAL_UART_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	bf14      	ite	ne
 80007e6:	2301      	movne	r3, #1
 80007e8:	2300      	moveq	r3, #0
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 80007f0:	f000 f940 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000074 	.word	0x20000074
 80007fc:	40004800 	.word	0x40004800

08000800 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000804:	4b16      	ldr	r3, [pc, #88]	; (8000860 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000806:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800080a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800080e:	2206      	movs	r2, #6
 8000810:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000814:	2202      	movs	r2, #2
 8000816:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000820:	2202      	movs	r2, #2
 8000822:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000824:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000826:	2201      	movs	r2, #1
 8000828:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800082a:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000830:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000836:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000838:	2201      	movs	r2, #1
 800083a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800083e:	2200      	movs	r2, #0
 8000840:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000842:	4807      	ldr	r0, [pc, #28]	; (8000860 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000844:	f000 fed9 	bl	80015fa <HAL_PCD_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	bf14      	ite	ne
 800084e:	2301      	movne	r3, #1
 8000850:	2300      	moveq	r3, #0
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x5c>
  {
    Error_Handler();
 8000858:	f000 f90c 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	200000fc 	.word	0x200000fc

08000864 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08c      	sub	sp, #48	; 0x30
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	4b79      	ldr	r3, [pc, #484]	; (8000a60 <_ZL12MX_GPIO_Initv+0x1fc>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a78      	ldr	r2, [pc, #480]	; (8000a60 <_ZL12MX_GPIO_Initv+0x1fc>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b76      	ldr	r3, [pc, #472]	; (8000a60 <_ZL12MX_GPIO_Initv+0x1fc>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	61bb      	str	r3, [r7, #24]
 8000890:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000892:	4b73      	ldr	r3, [pc, #460]	; (8000a60 <_ZL12MX_GPIO_Initv+0x1fc>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a72      	ldr	r2, [pc, #456]	; (8000a60 <_ZL12MX_GPIO_Initv+0x1fc>)
 8000898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b70      	ldr	r3, [pc, #448]	; (8000a60 <_ZL12MX_GPIO_Initv+0x1fc>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b6d      	ldr	r3, [pc, #436]	; (8000a60 <_ZL12MX_GPIO_Initv+0x1fc>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a6c      	ldr	r2, [pc, #432]	; (8000a60 <_ZL12MX_GPIO_Initv+0x1fc>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b6a      	ldr	r3, [pc, #424]	; (8000a60 <_ZL12MX_GPIO_Initv+0x1fc>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	4b67      	ldr	r3, [pc, #412]	; (8000a60 <_ZL12MX_GPIO_Initv+0x1fc>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a66      	ldr	r2, [pc, #408]	; (8000a60 <_ZL12MX_GPIO_Initv+0x1fc>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b64      	ldr	r3, [pc, #400]	; (8000a60 <_ZL12MX_GPIO_Initv+0x1fc>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008da:	4b61      	ldr	r3, [pc, #388]	; (8000a60 <_ZL12MX_GPIO_Initv+0x1fc>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a60      	ldr	r2, [pc, #384]	; (8000a60 <_ZL12MX_GPIO_Initv+0x1fc>)
 80008e0:	f043 0308 	orr.w	r3, r3, #8
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b5e      	ldr	r3, [pc, #376]	; (8000a60 <_ZL12MX_GPIO_Initv+0x1fc>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0308 	and.w	r3, r3, #8
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008f2:	4b5b      	ldr	r3, [pc, #364]	; (8000a60 <_ZL12MX_GPIO_Initv+0x1fc>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a5a      	ldr	r2, [pc, #360]	; (8000a60 <_ZL12MX_GPIO_Initv+0x1fc>)
 80008f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b58      	ldr	r3, [pc, #352]	; (8000a60 <_ZL12MX_GPIO_Initv+0x1fc>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_15|GPIO_PIN_8
 800090a:	2200      	movs	r2, #0
 800090c:	f24c 3101 	movw	r1, #49921	; 0xc301
 8000910:	4854      	ldr	r0, [pc, #336]	; (8000a64 <_ZL12MX_GPIO_Initv+0x200>)
 8000912:	f000 fe59 	bl	80015c8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2140      	movs	r1, #64	; 0x40
 800091a:	4853      	ldr	r0, [pc, #332]	; (8000a68 <_ZL12MX_GPIO_Initv+0x204>)
 800091c:	f000 fe54 	bl	80015c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	2140      	movs	r1, #64	; 0x40
 8000924:	4851      	ldr	r0, [pc, #324]	; (8000a6c <_ZL12MX_GPIO_Initv+0x208>)
 8000926:	f000 fe4f 	bl	80015c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800092a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000930:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	484a      	ldr	r0, [pc, #296]	; (8000a6c <_ZL12MX_GPIO_Initv+0x208>)
 8000942:	f000 fc95 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000946:	2332      	movs	r3, #50	; 0x32
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000952:	2303      	movs	r3, #3
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000956:	230b      	movs	r3, #11
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	4842      	ldr	r0, [pc, #264]	; (8000a6c <_ZL12MX_GPIO_Initv+0x208>)
 8000962:	f000 fc85 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000966:	2386      	movs	r3, #134	; 0x86
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000972:	2303      	movs	r3, #3
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000976:	230b      	movs	r3, #11
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	483b      	ldr	r0, [pc, #236]	; (8000a70 <_ZL12MX_GPIO_Initv+0x20c>)
 8000982:	f000 fc75 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000986:	f244 0301 	movw	r3, #16385	; 0x4001
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4831      	ldr	r0, [pc, #196]	; (8000a64 <_ZL12MX_GPIO_Initv+0x200>)
 80009a0:	f000 fc66 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80009a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b2:	2303      	movs	r3, #3
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009b6:	230b      	movs	r3, #11
 80009b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4828      	ldr	r0, [pc, #160]	; (8000a64 <_ZL12MX_GPIO_Initv+0x200>)
 80009c2:	f000 fc55 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
 80009c6:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	4821      	ldr	r0, [pc, #132]	; (8000a64 <_ZL12MX_GPIO_Initv+0x200>)
 80009e0:	f000 fc46 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009e4:	2340      	movs	r3, #64	; 0x40
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	481b      	ldr	r0, [pc, #108]	; (8000a68 <_ZL12MX_GPIO_Initv+0x204>)
 80009fc:	f000 fc38 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a00:	2380      	movs	r3, #128	; 0x80
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	4815      	ldr	r0, [pc, #84]	; (8000a68 <_ZL12MX_GPIO_Initv+0x204>)
 8000a14:	f000 fc2c 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a18:	2340      	movs	r3, #64	; 0x40
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480f      	ldr	r0, [pc, #60]	; (8000a6c <_ZL12MX_GPIO_Initv+0x208>)
 8000a30:	f000 fc1e 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a34:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a42:	2303      	movs	r3, #3
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a46:	230b      	movs	r3, #11
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <_ZL12MX_GPIO_Initv+0x204>)
 8000a52:	f000 fc0d 	bl	8001270 <HAL_GPIO_Init>

}
 8000a56:	bf00      	nop
 8000a58:	3730      	adds	r7, #48	; 0x30
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020400 	.word	0x40020400
 8000a68:	40021800 	.word	0x40021800
 8000a6c:	40020800 	.word	0x40020800
 8000a70:	40020000 	.word	0x40020000

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <Error_Handler+0x8>

08000a7e <_ZN25MicrostepDriverControllerC1ERKNS_13SpecificationER17TIM_HandleTypeDefRKNS_13GPIO_Pin_PairES7_>:
#include "microstep_driver_controller.hpp"

#include <algorithm>

MicrostepDriverController::MicrostepDriverController(
 8000a7e:	b4b0      	push	{r4, r5, r7}
 8000a80:	b085      	sub	sp, #20
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	60f8      	str	r0, [r7, #12]
 8000a86:	60b9      	str	r1, [r7, #8]
 8000a88:	607a      	str	r2, [r7, #4]
 8000a8a:	603b      	str	r3, [r7, #0]
    const GPIO_Pin_Pair& direction_pin_pair):
    _specs(specification),
    _timer_ref(timer),
    _pulse_pin_pair(pulse_pin_pair),
    _dir_pin_pair(direction_pin_pair),
	_step_delay(UINT64_MAX)
 8000a8c:	68fa      	ldr	r2, [r7, #12]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	4614      	mov	r4, r2
 8000a92:	461d      	mov	r5, r3
 8000a94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a98:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	621a      	str	r2, [r3, #32]
 8000aa6:	68f9      	ldr	r1, [r7, #12]
 8000aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aac:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	683a      	ldr	r2, [r7, #0]
 8000ab8:	3330      	adds	r3, #48	; 0x30
 8000aba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000abe:	e883 0003 	stmia.w	r3, {r0, r1}
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	6a3a      	ldr	r2, [r7, #32]
 8000ac6:	3338      	adds	r3, #56	; 0x38
 8000ac8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000acc:	e883 0003 	stmia.w	r3, {r0, r1}
{}
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bcb0      	pop	{r4, r5, r7}
 8000ada:	4770      	bx	lr

08000adc <_ZN25MicrostepDriverController9set_speedEt>:

void MicrostepDriverController::set_speed(uint16_t rpm) {
 8000adc:	b5b0      	push	{r4, r5, r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	8079      	strh	r1, [r7, #2]
    _step_delay = 60ULL * 1000ULL * 1000ULL / static_cast<uint64_t>(_specs.steps_per_revolution) / static_cast<uint64_t>(rpm);
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	6809      	ldr	r1, [r1, #0]
 8000aea:	2000      	movs	r0, #0
 8000aec:	460a      	mov	r2, r1
 8000aee:	4603      	mov	r3, r0
 8000af0:	480c      	ldr	r0, [pc, #48]	; (8000b24 <_ZN25MicrostepDriverController9set_speedEt+0x48>)
 8000af2:	f04f 0100 	mov.w	r1, #0
 8000af6:	f7ff fb87 	bl	8000208 <__aeabi_uldivmod>
 8000afa:	4602      	mov	r2, r0
 8000afc:	460b      	mov	r3, r1
 8000afe:	4610      	mov	r0, r2
 8000b00:	4619      	mov	r1, r3
 8000b02:	887b      	ldrh	r3, [r7, #2]
 8000b04:	2200      	movs	r2, #0
 8000b06:	461c      	mov	r4, r3
 8000b08:	4615      	mov	r5, r2
 8000b0a:	4622      	mov	r2, r4
 8000b0c:	462b      	mov	r3, r5
 8000b0e:	f7ff fb7b 	bl	8000208 <__aeabi_uldivmod>
 8000b12:	4602      	mov	r2, r0
 8000b14:	460b      	mov	r3, r1
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bdb0      	pop	{r4, r5, r7, pc}
 8000b24:	03938700 	.word	0x03938700

08000b28 <_ZN25MicrostepDriverController13set_directionENS_9DirectionE>:

void MicrostepDriverController::set_direction(Direction dir) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(_dir_pin_pair.GPIO, _dir_pin_pair.pin, dir == RIGHT ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 8000b3c:	78fb      	ldrb	r3, [r7, #3]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d101      	bne.n	8000b46 <_ZN25MicrostepDriverController13set_directionENS_9DirectionE+0x1e>
 8000b42:	2301      	movs	r3, #1
 8000b44:	e000      	b.n	8000b48 <_ZN25MicrostepDriverController13set_directionENS_9DirectionE+0x20>
 8000b46:	2300      	movs	r3, #0
 8000b48:	461a      	mov	r2, r3
 8000b4a:	f000 fd3d 	bl	80015c8 <HAL_GPIO_WritePin>
    u_delay(_specs.min_direction_advance);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f000 f866 	bl	8000c26 <_ZN25MicrostepDriverController7u_delayEy>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <_ZN25MicrostepDriverController10send_pulseEt>:

void MicrostepDriverController::send_pulse(uint16_t count) {
 8000b62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b64:	b08b      	sub	sp, #44	; 0x2c
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	807b      	strh	r3, [r7, #2]
    uint64_t high_state_width = std::max(_specs.min_high_level_width, _step_delay / 2ULL);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f103 0608 	add.w	r6, r3, #8
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8000b7a:	f04f 0200 	mov.w	r2, #0
 8000b7e:	f04f 0300 	mov.w	r3, #0
 8000b82:	0842      	lsrs	r2, r0, #1
 8000b84:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8000b88:	084b      	lsrs	r3, r1, #1
 8000b8a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8000b8e:	f107 0308 	add.w	r3, r7, #8
 8000b92:	4619      	mov	r1, r3
 8000b94:	4630      	mov	r0, r6
 8000b96:	f000 f869 	bl	8000c6c <_ZSt3maxIyERKT_S2_S2_>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    uint64_t low_state_width = std::max(_specs.min_high_level_width, _step_delay - high_state_width);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f103 0608 	add.w	r6, r3, #8
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8000bb0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000bb4:	1a84      	subs	r4, r0, r2
 8000bb6:	eb61 0503 	sbc.w	r5, r1, r3
 8000bba:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8000bbe:	f107 0310 	add.w	r3, r7, #16
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4630      	mov	r0, r6
 8000bc6:	f000 f851 	bl	8000c6c <_ZSt3maxIyERKT_S2_S2_>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd0:	e9c7 2306 	strd	r2, r3, [r7, #24]

    while(count--) {
 8000bd4:	887b      	ldrh	r3, [r7, #2]
 8000bd6:	1e5a      	subs	r2, r3, #1
 8000bd8:	807a      	strh	r2, [r7, #2]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	bf14      	ite	ne
 8000bde:	2301      	movne	r3, #1
 8000be0:	2300      	moveq	r3, #0
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d01a      	beq.n	8000c1e <_ZN25MicrostepDriverController10send_pulseEt+0xbc>
        HAL_GPIO_WritePin(_pulse_pin_pair.GPIO, _pulse_pin_pair.pin, GPIO_PIN_SET);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f000 fce8 	bl	80015c8 <HAL_GPIO_WritePin>
        u_delay(high_state_width);
 8000bf8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f000 f812 	bl	8000c26 <_ZN25MicrostepDriverController7u_delayEy>
        HAL_GPIO_WritePin(_pulse_pin_pair.GPIO, _pulse_pin_pair.pin, GPIO_PIN_RESET);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f000 fcdb 	bl	80015c8 <HAL_GPIO_WritePin>
        u_delay(low_state_width);
 8000c12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f000 f805 	bl	8000c26 <_ZN25MicrostepDriverController7u_delayEy>
    while(count--) {
 8000c1c:	e7da      	b.n	8000bd4 <_ZN25MicrostepDriverController10send_pulseEt+0x72>
    }
}
 8000c1e:	bf00      	nop
 8000c20:	372c      	adds	r7, #44	; 0x2c
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c26 <_ZN25MicrostepDriverController7u_delayEy>:

void MicrostepDriverController::u_delay(uint64_t us) {
 8000c26:	b4b0      	push	{r4, r5, r7}
 8000c28:	b085      	sub	sp, #20
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	60f8      	str	r0, [r7, #12]
 8000c2e:	e9c7 2300 	strd	r2, r3, [r7]
    __HAL_TIM_SET_COUNTER(&_timer_ref, 0);  
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	6a1b      	ldr	r3, [r3, #32]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&_timer_ref) < us);
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	6a1b      	ldr	r3, [r3, #32]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c44:	2200      	movs	r2, #0
 8000c46:	461c      	mov	r4, r3
 8000c48:	4615      	mov	r5, r2
 8000c4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000c4e:	4294      	cmp	r4, r2
 8000c50:	eb75 0303 	sbcs.w	r3, r5, r3
 8000c54:	bf34      	ite	cc
 8000c56:	2301      	movcc	r3, #1
 8000c58:	2300      	movcs	r3, #0
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d000      	beq.n	8000c62 <_ZN25MicrostepDriverController7u_delayEy+0x3c>
 8000c60:	e7ec      	b.n	8000c3c <_ZN25MicrostepDriverController7u_delayEy+0x16>
}
 8000c62:	bf00      	nop
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bcb0      	pop	{r4, r5, r7}
 8000c6a:	4770      	bx	lr

08000c6c <_ZSt3maxIyERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c82:	4290      	cmp	r0, r2
 8000c84:	eb71 0303 	sbcs.w	r3, r1, r3
 8000c88:	d201      	bcs.n	8000c8e <_ZSt3maxIyERKT_S2_S2_+0x22>
	return __b;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	e000      	b.n	8000c90 <_ZSt3maxIyERKT_S2_S2_+0x24>
      return __a;
 8000c8e:	687b      	ldr	r3, [r7, #4]
    }
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_MspInit+0x44>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <HAL_MspInit+0x44>)
 8000ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cac:	6413      	str	r3, [r2, #64]	; 0x40
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800

08000ce4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <HAL_TIM_Base_MspInit+0x38>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d10b      	bne.n	8000d0e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <HAL_TIM_Base_MspInit+0x3c>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	4a09      	ldr	r2, [pc, #36]	; (8000d20 <HAL_TIM_Base_MspInit+0x3c>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6453      	str	r3, [r2, #68]	; 0x44
 8000d02:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <HAL_TIM_Base_MspInit+0x3c>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d0e:	bf00      	nop
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	40010000 	.word	0x40010000
 8000d20:	40023800 	.word	0x40023800

08000d24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b0aa      	sub	sp, #168	; 0xa8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	2284      	movs	r2, #132	; 0x84
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f003 f92f 	bl	8003fa8 <memset>
  if(huart->Instance==USART3)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a22      	ldr	r2, [pc, #136]	; (8000dd8 <HAL_UART_MspInit+0xb4>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d13c      	bne.n	8000dce <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d58:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d5e:	f107 0310 	add.w	r3, r7, #16
 8000d62:	4618      	mov	r0, r3
 8000d64:	f001 fa6c 	bl	8002240 <HAL_RCCEx_PeriphCLKConfig>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d6e:	f7ff fe81 	bl	8000a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d72:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <HAL_UART_MspInit+0xb8>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <HAL_UART_MspInit+0xb8>)
 8000d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7e:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <HAL_UART_MspInit+0xb8>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <HAL_UART_MspInit+0xb8>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a13      	ldr	r2, [pc, #76]	; (8000ddc <HAL_UART_MspInit+0xb8>)
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <HAL_UART_MspInit+0xb8>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0308 	and.w	r3, r3, #8
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000da2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000da6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db6:	2303      	movs	r3, #3
 8000db8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dbc:	2307      	movs	r3, #7
 8000dbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4805      	ldr	r0, [pc, #20]	; (8000de0 <HAL_UART_MspInit+0xbc>)
 8000dca:	f000 fa51 	bl	8001270 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dce:	bf00      	nop
 8000dd0:	37a8      	adds	r7, #168	; 0xa8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40004800 	.word	0x40004800
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020c00 	.word	0x40020c00

08000de4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b0ac      	sub	sp, #176	; 0xb0
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dfc:	f107 0318 	add.w	r3, r7, #24
 8000e00:	2284      	movs	r2, #132	; 0x84
 8000e02:	2100      	movs	r1, #0
 8000e04:	4618      	mov	r0, r3
 8000e06:	f003 f8cf 	bl	8003fa8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e12:	d159      	bne.n	8000ec8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e18:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e20:	f107 0318 	add.w	r3, r7, #24
 8000e24:	4618      	mov	r0, r3
 8000e26:	f001 fa0b 	bl	8002240 <HAL_RCCEx_PeriphCLKConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000e30:	f7ff fe20 	bl	8000a74 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e34:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <HAL_PCD_MspInit+0xec>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	4a25      	ldr	r2, [pc, #148]	; (8000ed0 <HAL_PCD_MspInit+0xec>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e40:	4b23      	ldr	r3, [pc, #140]	; (8000ed0 <HAL_PCD_MspInit+0xec>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e4c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e60:	2303      	movs	r3, #3
 8000e62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e66:	230a      	movs	r3, #10
 8000e68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e70:	4619      	mov	r1, r3
 8000e72:	4818      	ldr	r0, [pc, #96]	; (8000ed4 <HAL_PCD_MspInit+0xf0>)
 8000e74:	f000 f9fc 	bl	8001270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e90:	4619      	mov	r1, r3
 8000e92:	4810      	ldr	r0, [pc, #64]	; (8000ed4 <HAL_PCD_MspInit+0xf0>)
 8000e94:	f000 f9ec 	bl	8001270 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <HAL_PCD_MspInit+0xec>)
 8000e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e9c:	4a0c      	ldr	r2, [pc, #48]	; (8000ed0 <HAL_PCD_MspInit+0xec>)
 8000e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ea2:	6353      	str	r3, [r2, #52]	; 0x34
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <HAL_PCD_MspInit+0xec>)
 8000ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <HAL_PCD_MspInit+0xec>)
 8000eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb4:	4a06      	ldr	r2, [pc, #24]	; (8000ed0 <HAL_PCD_MspInit+0xec>)
 8000eb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eba:	6453      	str	r3, [r2, #68]	; 0x44
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <HAL_PCD_MspInit+0xec>)
 8000ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ec8:	bf00      	nop
 8000eca:	37b0      	adds	r7, #176	; 0xb0
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020000 	.word	0x40020000

08000ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <NMI_Handler+0x4>

08000ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <HardFault_Handler+0x4>

08000ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <MemManage_Handler+0x4>

08000eea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <BusFault_Handler+0x4>

08000ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <UsageFault_Handler+0x4>

08000ef6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f24:	f000 f87a 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <SystemInit+0x20>)
 8000f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f36:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <SystemInit+0x20>)
 8000f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f54:	480d      	ldr	r0, [pc, #52]	; (8000f8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f56:	490e      	ldr	r1, [pc, #56]	; (8000f90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f58:	4a0e      	ldr	r2, [pc, #56]	; (8000f94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f6c:	4c0b      	ldr	r4, [pc, #44]	; (8000f9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f7a:	f7ff ffd7 	bl	8000f2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7e:	f002 ffef 	bl	8003f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f82:	f7ff fac3 	bl	800050c <main>
  bx  lr    
 8000f86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f88:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f94:	08004008 	.word	0x08004008
  ldr r2, =_sbss
 8000f98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f9c:	20000608 	.word	0x20000608

08000fa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa0:	e7fe      	b.n	8000fa0 <ADC_IRQHandler>

08000fa2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa6:	2003      	movs	r0, #3
 8000fa8:	f000 f92e 	bl	8001208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fac:	2000      	movs	r0, #0
 8000fae:	f000 f805 	bl	8000fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb2:	f7ff fe73 	bl	8000c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_InitTick+0x54>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_InitTick+0x58>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 f93b 	bl	8001256 <HAL_SYSTICK_Config>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00e      	b.n	8001008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b0f      	cmp	r3, #15
 8000fee:	d80a      	bhi.n	8001006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f000 f911 	bl	800121e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ffc:	4a06      	ldr	r2, [pc, #24]	; (8001018 <HAL_InitTick+0x5c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	e000      	b.n	8001008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000000 	.word	0x20000000
 8001014:	20000008 	.word	0x20000008
 8001018:	20000004 	.word	0x20000004

0800101c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_IncTick+0x20>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x24>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <HAL_IncTick+0x24>)
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000008 	.word	0x20000008
 8001040:	20000604 	.word	0x20000604

08001044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return uwTick;
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <HAL_GetTick+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000604 	.word	0x20000604

0800105c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001064:	f7ff ffee 	bl	8001044 <HAL_GetTick>
 8001068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001074:	d005      	beq.n	8001082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <HAL_Delay+0x44>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001082:	bf00      	nop
 8001084:	f7ff ffde 	bl	8001044 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	d8f7      	bhi.n	8001084 <HAL_Delay+0x28>
  {
  }
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000008 	.word	0x20000008

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <__NVIC_SetPriorityGrouping+0x40>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010ce:	4313      	orrs	r3, r2
 80010d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d2:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <__NVIC_SetPriorityGrouping+0x40>)
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	60d3      	str	r3, [r2, #12]
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000ed00 	.word	0xe000ed00
 80010e8:	05fa0000 	.word	0x05fa0000

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	; (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	; (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f1c3 0307 	rsb	r3, r3, #7
 8001176:	2b04      	cmp	r3, #4
 8001178:	bf28      	it	cs
 800117a:	2304      	movcs	r3, #4
 800117c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3304      	adds	r3, #4
 8001182:	2b06      	cmp	r3, #6
 8001184:	d902      	bls.n	800118c <NVIC_EncodePriority+0x30>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b03      	subs	r3, #3
 800118a:	e000      	b.n	800118e <NVIC_EncodePriority+0x32>
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4313      	orrs	r3, r2
         );
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	; 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d4:	d301      	bcc.n	80011da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00f      	b.n	80011fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011da:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <SysTick_Config+0x40>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e2:	210f      	movs	r1, #15
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f7ff ff8e 	bl	8001108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <SysTick_Config+0x40>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f2:	4b04      	ldr	r3, [pc, #16]	; (8001204 <SysTick_Config+0x40>)
 80011f4:	2207      	movs	r2, #7
 80011f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	e000e010 	.word	0xe000e010

08001208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff47 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001230:	f7ff ff5c 	bl	80010ec <__NVIC_GetPriorityGrouping>
 8001234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	6978      	ldr	r0, [r7, #20]
 800123c:	f7ff ff8e 	bl	800115c <NVIC_EncodePriority>
 8001240:	4602      	mov	r2, r0
 8001242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff5d 	bl	8001108 <__NVIC_SetPriority>
}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ffb0 	bl	80011c4 <SysTick_Config>
 8001264:	4603      	mov	r3, r0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
 800128e:	e175      	b.n	800157c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001290:	2201      	movs	r2, #1
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	f040 8164 	bne.w	8001576 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d005      	beq.n	80012c6 <HAL_GPIO_Init+0x56>
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d130      	bne.n	8001328 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	2203      	movs	r2, #3
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	68da      	ldr	r2, [r3, #12]
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012fc:	2201      	movs	r2, #1
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	091b      	lsrs	r3, r3, #4
 8001312:	f003 0201 	and.w	r2, r3, #1
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	2b03      	cmp	r3, #3
 8001332:	d017      	beq.n	8001364 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	2203      	movs	r2, #3
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d123      	bne.n	80013b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	08da      	lsrs	r2, r3, #3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3208      	adds	r2, #8
 8001378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800137c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	f003 0307 	and.w	r3, r3, #7
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	220f      	movs	r2, #15
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	691a      	ldr	r2, [r3, #16]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	08da      	lsrs	r2, r3, #3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3208      	adds	r2, #8
 80013b2:	69b9      	ldr	r1, [r7, #24]
 80013b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	2203      	movs	r2, #3
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 0203 	and.w	r2, r3, #3
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f000 80be 	beq.w	8001576 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fa:	4b66      	ldr	r3, [pc, #408]	; (8001594 <HAL_GPIO_Init+0x324>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	4a65      	ldr	r2, [pc, #404]	; (8001594 <HAL_GPIO_Init+0x324>)
 8001400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001404:	6453      	str	r3, [r2, #68]	; 0x44
 8001406:	4b63      	ldr	r3, [pc, #396]	; (8001594 <HAL_GPIO_Init+0x324>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001412:	4a61      	ldr	r2, [pc, #388]	; (8001598 <HAL_GPIO_Init+0x328>)
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	089b      	lsrs	r3, r3, #2
 8001418:	3302      	adds	r3, #2
 800141a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	220f      	movs	r2, #15
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a58      	ldr	r2, [pc, #352]	; (800159c <HAL_GPIO_Init+0x32c>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d037      	beq.n	80014ae <HAL_GPIO_Init+0x23e>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a57      	ldr	r2, [pc, #348]	; (80015a0 <HAL_GPIO_Init+0x330>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d031      	beq.n	80014aa <HAL_GPIO_Init+0x23a>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a56      	ldr	r2, [pc, #344]	; (80015a4 <HAL_GPIO_Init+0x334>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d02b      	beq.n	80014a6 <HAL_GPIO_Init+0x236>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a55      	ldr	r2, [pc, #340]	; (80015a8 <HAL_GPIO_Init+0x338>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d025      	beq.n	80014a2 <HAL_GPIO_Init+0x232>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a54      	ldr	r2, [pc, #336]	; (80015ac <HAL_GPIO_Init+0x33c>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d01f      	beq.n	800149e <HAL_GPIO_Init+0x22e>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a53      	ldr	r2, [pc, #332]	; (80015b0 <HAL_GPIO_Init+0x340>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d019      	beq.n	800149a <HAL_GPIO_Init+0x22a>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a52      	ldr	r2, [pc, #328]	; (80015b4 <HAL_GPIO_Init+0x344>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d013      	beq.n	8001496 <HAL_GPIO_Init+0x226>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a51      	ldr	r2, [pc, #324]	; (80015b8 <HAL_GPIO_Init+0x348>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d00d      	beq.n	8001492 <HAL_GPIO_Init+0x222>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a50      	ldr	r2, [pc, #320]	; (80015bc <HAL_GPIO_Init+0x34c>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d007      	beq.n	800148e <HAL_GPIO_Init+0x21e>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a4f      	ldr	r2, [pc, #316]	; (80015c0 <HAL_GPIO_Init+0x350>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d101      	bne.n	800148a <HAL_GPIO_Init+0x21a>
 8001486:	2309      	movs	r3, #9
 8001488:	e012      	b.n	80014b0 <HAL_GPIO_Init+0x240>
 800148a:	230a      	movs	r3, #10
 800148c:	e010      	b.n	80014b0 <HAL_GPIO_Init+0x240>
 800148e:	2308      	movs	r3, #8
 8001490:	e00e      	b.n	80014b0 <HAL_GPIO_Init+0x240>
 8001492:	2307      	movs	r3, #7
 8001494:	e00c      	b.n	80014b0 <HAL_GPIO_Init+0x240>
 8001496:	2306      	movs	r3, #6
 8001498:	e00a      	b.n	80014b0 <HAL_GPIO_Init+0x240>
 800149a:	2305      	movs	r3, #5
 800149c:	e008      	b.n	80014b0 <HAL_GPIO_Init+0x240>
 800149e:	2304      	movs	r3, #4
 80014a0:	e006      	b.n	80014b0 <HAL_GPIO_Init+0x240>
 80014a2:	2303      	movs	r3, #3
 80014a4:	e004      	b.n	80014b0 <HAL_GPIO_Init+0x240>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e002      	b.n	80014b0 <HAL_GPIO_Init+0x240>
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <HAL_GPIO_Init+0x240>
 80014ae:	2300      	movs	r3, #0
 80014b0:	69fa      	ldr	r2, [r7, #28]
 80014b2:	f002 0203 	and.w	r2, r2, #3
 80014b6:	0092      	lsls	r2, r2, #2
 80014b8:	4093      	lsls	r3, r2
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80014c0:	4935      	ldr	r1, [pc, #212]	; (8001598 <HAL_GPIO_Init+0x328>)
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	089b      	lsrs	r3, r3, #2
 80014c6:	3302      	adds	r3, #2
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ce:	4b3d      	ldr	r3, [pc, #244]	; (80015c4 <HAL_GPIO_Init+0x354>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	43db      	mvns	r3, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4013      	ands	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014f2:	4a34      	ldr	r2, [pc, #208]	; (80015c4 <HAL_GPIO_Init+0x354>)
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014f8:	4b32      	ldr	r3, [pc, #200]	; (80015c4 <HAL_GPIO_Init+0x354>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	43db      	mvns	r3, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	4313      	orrs	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800151c:	4a29      	ldr	r2, [pc, #164]	; (80015c4 <HAL_GPIO_Init+0x354>)
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001522:	4b28      	ldr	r3, [pc, #160]	; (80015c4 <HAL_GPIO_Init+0x354>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	43db      	mvns	r3, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4013      	ands	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001546:	4a1f      	ldr	r2, [pc, #124]	; (80015c4 <HAL_GPIO_Init+0x354>)
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800154c:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <HAL_GPIO_Init+0x354>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	43db      	mvns	r3, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001570:	4a14      	ldr	r2, [pc, #80]	; (80015c4 <HAL_GPIO_Init+0x354>)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3301      	adds	r3, #1
 800157a:	61fb      	str	r3, [r7, #28]
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	2b0f      	cmp	r3, #15
 8001580:	f67f ae86 	bls.w	8001290 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	3724      	adds	r7, #36	; 0x24
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800
 8001598:	40013800 	.word	0x40013800
 800159c:	40020000 	.word	0x40020000
 80015a0:	40020400 	.word	0x40020400
 80015a4:	40020800 	.word	0x40020800
 80015a8:	40020c00 	.word	0x40020c00
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40021400 	.word	0x40021400
 80015b4:	40021800 	.word	0x40021800
 80015b8:	40021c00 	.word	0x40021c00
 80015bc:	40022000 	.word	0x40022000
 80015c0:	40022400 	.word	0x40022400
 80015c4:	40013c00 	.word	0x40013c00

080015c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	807b      	strh	r3, [r7, #2]
 80015d4:	4613      	mov	r3, r2
 80015d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015d8:	787b      	ldrb	r3, [r7, #1]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015de:	887a      	ldrh	r2, [r7, #2]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80015e4:	e003      	b.n	80015ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80015e6:	887b      	ldrh	r3, [r7, #2]
 80015e8:	041a      	lsls	r2, r3, #16
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	619a      	str	r2, [r3, #24]
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015fc:	b08f      	sub	sp, #60	; 0x3c
 80015fe:	af0a      	add	r7, sp, #40	; 0x28
 8001600:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e116      	b.n	800183a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d106      	bne.n	800162c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff fbdc 	bl	8000de4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2203      	movs	r2, #3
 8001630:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163c:	2b00      	cmp	r3, #0
 800163e:	d102      	bne.n	8001646 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f002 f9ec 	bl	8003a28 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	603b      	str	r3, [r7, #0]
 8001656:	687e      	ldr	r6, [r7, #4]
 8001658:	466d      	mov	r5, sp
 800165a:	f106 0410 	add.w	r4, r6, #16
 800165e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001664:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001666:	e894 0003 	ldmia.w	r4, {r0, r1}
 800166a:	e885 0003 	stmia.w	r5, {r0, r1}
 800166e:	1d33      	adds	r3, r6, #4
 8001670:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001672:	6838      	ldr	r0, [r7, #0]
 8001674:	f002 f980 	bl	8003978 <USB_CoreInit>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d005      	beq.n	800168a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2202      	movs	r2, #2
 8001682:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e0d7      	b.n	800183a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2100      	movs	r1, #0
 8001690:	4618      	mov	r0, r3
 8001692:	f002 f9da 	bl	8003a4a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001696:	2300      	movs	r3, #0
 8001698:	73fb      	strb	r3, [r7, #15]
 800169a:	e04a      	b.n	8001732 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800169c:	7bfa      	ldrb	r2, [r7, #15]
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	4613      	mov	r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	4413      	add	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	333d      	adds	r3, #61	; 0x3d
 80016ac:	2201      	movs	r2, #1
 80016ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80016b0:	7bfa      	ldrb	r2, [r7, #15]
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	4413      	add	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	333c      	adds	r3, #60	; 0x3c
 80016c0:	7bfa      	ldrb	r2, [r7, #15]
 80016c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80016c4:	7bfa      	ldrb	r2, [r7, #15]
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	b298      	uxth	r0, r3
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	4613      	mov	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	4413      	add	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	3344      	adds	r3, #68	; 0x44
 80016d8:	4602      	mov	r2, r0
 80016da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80016dc:	7bfa      	ldrb	r2, [r7, #15]
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	4413      	add	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	3340      	adds	r3, #64	; 0x40
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80016f0:	7bfa      	ldrb	r2, [r7, #15]
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	4413      	add	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	440b      	add	r3, r1
 80016fe:	3348      	adds	r3, #72	; 0x48
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001704:	7bfa      	ldrb	r2, [r7, #15]
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	4613      	mov	r3, r2
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	4413      	add	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	334c      	adds	r3, #76	; 0x4c
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001718:	7bfa      	ldrb	r2, [r7, #15]
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	4413      	add	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	440b      	add	r3, r1
 8001726:	3354      	adds	r3, #84	; 0x54
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	3301      	adds	r3, #1
 8001730:	73fb      	strb	r3, [r7, #15]
 8001732:	7bfa      	ldrb	r2, [r7, #15]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	429a      	cmp	r2, r3
 800173a:	d3af      	bcc.n	800169c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800173c:	2300      	movs	r3, #0
 800173e:	73fb      	strb	r3, [r7, #15]
 8001740:	e044      	b.n	80017cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001742:	7bfa      	ldrb	r2, [r7, #15]
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	4413      	add	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	440b      	add	r3, r1
 8001750:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001754:	2200      	movs	r2, #0
 8001756:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001758:	7bfa      	ldrb	r2, [r7, #15]
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	4413      	add	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800176a:	7bfa      	ldrb	r2, [r7, #15]
 800176c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800176e:	7bfa      	ldrb	r2, [r7, #15]
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	4413      	add	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	440b      	add	r3, r1
 800177c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001784:	7bfa      	ldrb	r2, [r7, #15]
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	4613      	mov	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	4413      	add	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	440b      	add	r3, r1
 8001792:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800179a:	7bfa      	ldrb	r2, [r7, #15]
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	4413      	add	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	440b      	add	r3, r1
 80017a8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80017b0:	7bfa      	ldrb	r2, [r7, #15]
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	4613      	mov	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	4413      	add	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	3301      	adds	r3, #1
 80017ca:	73fb      	strb	r3, [r7, #15]
 80017cc:	7bfa      	ldrb	r2, [r7, #15]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d3b5      	bcc.n	8001742 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	687e      	ldr	r6, [r7, #4]
 80017de:	466d      	mov	r5, sp
 80017e0:	f106 0410 	add.w	r4, r6, #16
 80017e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80017f4:	1d33      	adds	r3, r6, #4
 80017f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017f8:	6838      	ldr	r0, [r7, #0]
 80017fa:	f002 f973 	bl	8003ae4 <USB_DevInit>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2202      	movs	r2, #2
 8001808:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e014      	b.n	800183a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	2b01      	cmp	r3, #1
 8001826:	d102      	bne.n	800182e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 f80b 	bl	8001844 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f002 fb31 	bl	8003e9a <USB_DevDisconnect>

  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001844 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001872:	4b05      	ldr	r3, [pc, #20]	; (8001888 <HAL_PCDEx_ActivateLPM+0x44>)
 8001874:	4313      	orrs	r3, r2
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	10000003 	.word	0x10000003

0800188c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189a:	6013      	str	r3, [r2, #0]
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40007000 	.word	0x40007000

080018ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80018b4:	2300      	movs	r3, #0
 80018b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e291      	b.n	8001de6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 8087 	beq.w	80019de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018d0:	4b96      	ldr	r3, [pc, #600]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 030c 	and.w	r3, r3, #12
 80018d8:	2b04      	cmp	r3, #4
 80018da:	d00c      	beq.n	80018f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018dc:	4b93      	ldr	r3, [pc, #588]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 030c 	and.w	r3, r3, #12
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d112      	bne.n	800190e <HAL_RCC_OscConfig+0x62>
 80018e8:	4b90      	ldr	r3, [pc, #576]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018f4:	d10b      	bne.n	800190e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f6:	4b8d      	ldr	r3, [pc, #564]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d06c      	beq.n	80019dc <HAL_RCC_OscConfig+0x130>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d168      	bne.n	80019dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e26b      	b.n	8001de6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001916:	d106      	bne.n	8001926 <HAL_RCC_OscConfig+0x7a>
 8001918:	4b84      	ldr	r3, [pc, #528]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a83      	ldr	r2, [pc, #524]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 800191e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	e02e      	b.n	8001984 <HAL_RCC_OscConfig+0xd8>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10c      	bne.n	8001948 <HAL_RCC_OscConfig+0x9c>
 800192e:	4b7f      	ldr	r3, [pc, #508]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a7e      	ldr	r2, [pc, #504]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 8001934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	4b7c      	ldr	r3, [pc, #496]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a7b      	ldr	r2, [pc, #492]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 8001940:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	e01d      	b.n	8001984 <HAL_RCC_OscConfig+0xd8>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001950:	d10c      	bne.n	800196c <HAL_RCC_OscConfig+0xc0>
 8001952:	4b76      	ldr	r3, [pc, #472]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a75      	ldr	r2, [pc, #468]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 8001958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	4b73      	ldr	r3, [pc, #460]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a72      	ldr	r2, [pc, #456]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 8001964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	e00b      	b.n	8001984 <HAL_RCC_OscConfig+0xd8>
 800196c:	4b6f      	ldr	r3, [pc, #444]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a6e      	ldr	r2, [pc, #440]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 8001972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	4b6c      	ldr	r3, [pc, #432]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a6b      	ldr	r2, [pc, #428]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 800197e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d013      	beq.n	80019b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff fb5a 	bl	8001044 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001994:	f7ff fb56 	bl	8001044 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b64      	cmp	r3, #100	; 0x64
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e21f      	b.n	8001de6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a6:	4b61      	ldr	r3, [pc, #388]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCC_OscConfig+0xe8>
 80019b2:	e014      	b.n	80019de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b4:	f7ff fb46 	bl	8001044 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019bc:	f7ff fb42 	bl	8001044 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b64      	cmp	r3, #100	; 0x64
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e20b      	b.n	8001de6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ce:	4b57      	ldr	r3, [pc, #348]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_OscConfig+0x110>
 80019da:	e000      	b.n	80019de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d069      	beq.n	8001abe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ea:	4b50      	ldr	r3, [pc, #320]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00b      	beq.n	8001a0e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019f6:	4b4d      	ldr	r3, [pc, #308]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 030c 	and.w	r3, r3, #12
 80019fe:	2b08      	cmp	r3, #8
 8001a00:	d11c      	bne.n	8001a3c <HAL_RCC_OscConfig+0x190>
 8001a02:	4b4a      	ldr	r3, [pc, #296]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d116      	bne.n	8001a3c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a0e:	4b47      	ldr	r3, [pc, #284]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d005      	beq.n	8001a26 <HAL_RCC_OscConfig+0x17a>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d001      	beq.n	8001a26 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e1df      	b.n	8001de6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a26:	4b41      	ldr	r3, [pc, #260]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	493d      	ldr	r1, [pc, #244]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3a:	e040      	b.n	8001abe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d023      	beq.n	8001a8c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a44:	4b39      	ldr	r3, [pc, #228]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a38      	ldr	r2, [pc, #224]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff faf8 	bl	8001044 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a58:	f7ff faf4 	bl	8001044 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e1bd      	b.n	8001de6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6a:	4b30      	ldr	r3, [pc, #192]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a76:	4b2d      	ldr	r3, [pc, #180]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	4929      	ldr	r1, [pc, #164]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	600b      	str	r3, [r1, #0]
 8001a8a:	e018      	b.n	8001abe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a8c:	4b27      	ldr	r3, [pc, #156]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a26      	ldr	r2, [pc, #152]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 8001a92:	f023 0301 	bic.w	r3, r3, #1
 8001a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a98:	f7ff fad4 	bl	8001044 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa0:	f7ff fad0 	bl	8001044 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e199      	b.n	8001de6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab2:	4b1e      	ldr	r3, [pc, #120]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f0      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d038      	beq.n	8001b3c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d019      	beq.n	8001b06 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ad2:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 8001ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad6:	4a15      	ldr	r2, [pc, #84]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ade:	f7ff fab1 	bl	8001044 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae6:	f7ff faad 	bl	8001044 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e176      	b.n	8001de6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 8001afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0f0      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x23a>
 8001b04:	e01a      	b.n	8001b3c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 8001b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b0a:	4a08      	ldr	r2, [pc, #32]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 8001b0c:	f023 0301 	bic.w	r3, r3, #1
 8001b10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b12:	f7ff fa97 	bl	8001044 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b18:	e00a      	b.n	8001b30 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b1a:	f7ff fa93 	bl	8001044 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d903      	bls.n	8001b30 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e15c      	b.n	8001de6 <HAL_RCC_OscConfig+0x53a>
 8001b2c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b30:	4b91      	ldr	r3, [pc, #580]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1ee      	bne.n	8001b1a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 80a4 	beq.w	8001c92 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b4a:	4b8b      	ldr	r3, [pc, #556]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10d      	bne.n	8001b72 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b56:	4b88      	ldr	r3, [pc, #544]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	4a87      	ldr	r2, [pc, #540]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b60:	6413      	str	r3, [r2, #64]	; 0x40
 8001b62:	4b85      	ldr	r3, [pc, #532]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b72:	4b82      	ldr	r3, [pc, #520]	; (8001d7c <HAL_RCC_OscConfig+0x4d0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d118      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001b7e:	4b7f      	ldr	r3, [pc, #508]	; (8001d7c <HAL_RCC_OscConfig+0x4d0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a7e      	ldr	r2, [pc, #504]	; (8001d7c <HAL_RCC_OscConfig+0x4d0>)
 8001b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b8a:	f7ff fa5b 	bl	8001044 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b92:	f7ff fa57 	bl	8001044 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b64      	cmp	r3, #100	; 0x64
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e120      	b.n	8001de6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ba4:	4b75      	ldr	r3, [pc, #468]	; (8001d7c <HAL_RCC_OscConfig+0x4d0>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0f0      	beq.n	8001b92 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d106      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x31a>
 8001bb8:	4b6f      	ldr	r3, [pc, #444]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbc:	4a6e      	ldr	r2, [pc, #440]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc4:	e02d      	b.n	8001c22 <HAL_RCC_OscConfig+0x376>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10c      	bne.n	8001be8 <HAL_RCC_OscConfig+0x33c>
 8001bce:	4b6a      	ldr	r3, [pc, #424]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd2:	4a69      	ldr	r2, [pc, #420]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001bd4:	f023 0301 	bic.w	r3, r3, #1
 8001bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bda:	4b67      	ldr	r3, [pc, #412]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bde:	4a66      	ldr	r2, [pc, #408]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001be0:	f023 0304 	bic.w	r3, r3, #4
 8001be4:	6713      	str	r3, [r2, #112]	; 0x70
 8001be6:	e01c      	b.n	8001c22 <HAL_RCC_OscConfig+0x376>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2b05      	cmp	r3, #5
 8001bee:	d10c      	bne.n	8001c0a <HAL_RCC_OscConfig+0x35e>
 8001bf0:	4b61      	ldr	r3, [pc, #388]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf4:	4a60      	ldr	r2, [pc, #384]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001bf6:	f043 0304 	orr.w	r3, r3, #4
 8001bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8001bfc:	4b5e      	ldr	r3, [pc, #376]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c00:	4a5d      	ldr	r2, [pc, #372]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6713      	str	r3, [r2, #112]	; 0x70
 8001c08:	e00b      	b.n	8001c22 <HAL_RCC_OscConfig+0x376>
 8001c0a:	4b5b      	ldr	r3, [pc, #364]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0e:	4a5a      	ldr	r2, [pc, #360]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001c10:	f023 0301 	bic.w	r3, r3, #1
 8001c14:	6713      	str	r3, [r2, #112]	; 0x70
 8001c16:	4b58      	ldr	r3, [pc, #352]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c1a:	4a57      	ldr	r2, [pc, #348]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001c1c:	f023 0304 	bic.w	r3, r3, #4
 8001c20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d015      	beq.n	8001c56 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2a:	f7ff fa0b 	bl	8001044 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c30:	e00a      	b.n	8001c48 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c32:	f7ff fa07 	bl	8001044 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e0ce      	b.n	8001de6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c48:	4b4b      	ldr	r3, [pc, #300]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0ee      	beq.n	8001c32 <HAL_RCC_OscConfig+0x386>
 8001c54:	e014      	b.n	8001c80 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c56:	f7ff f9f5 	bl	8001044 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5c:	e00a      	b.n	8001c74 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5e:	f7ff f9f1 	bl	8001044 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e0b8      	b.n	8001de6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c74:	4b40      	ldr	r3, [pc, #256]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1ee      	bne.n	8001c5e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c80:	7dfb      	ldrb	r3, [r7, #23]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d105      	bne.n	8001c92 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c86:	4b3c      	ldr	r3, [pc, #240]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	4a3b      	ldr	r2, [pc, #236]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 80a4 	beq.w	8001de4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c9c:	4b36      	ldr	r3, [pc, #216]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 030c 	and.w	r3, r3, #12
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d06b      	beq.n	8001d80 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d149      	bne.n	8001d44 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb0:	4b31      	ldr	r3, [pc, #196]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a30      	ldr	r2, [pc, #192]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001cb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbc:	f7ff f9c2 	bl	8001044 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc4:	f7ff f9be 	bl	8001044 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e087      	b.n	8001de6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd6:	4b28      	ldr	r3, [pc, #160]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f0      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69da      	ldr	r2, [r3, #28]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	019b      	lsls	r3, r3, #6
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf8:	085b      	lsrs	r3, r3, #1
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	041b      	lsls	r3, r3, #16
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d04:	061b      	lsls	r3, r3, #24
 8001d06:	4313      	orrs	r3, r2
 8001d08:	4a1b      	ldr	r2, [pc, #108]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001d0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d0e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d10:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a18      	ldr	r2, [pc, #96]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001d16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1c:	f7ff f992 	bl	8001044 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d24:	f7ff f98e 	bl	8001044 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e057      	b.n	8001de6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0x478>
 8001d42:	e04f      	b.n	8001de4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d44:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a0b      	ldr	r2, [pc, #44]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001d4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7ff f978 	bl	8001044 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d58:	f7ff f974 	bl	8001044 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e03d      	b.n	8001de6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d6a:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <HAL_RCC_OscConfig+0x4cc>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x4ac>
 8001d76:	e035      	b.n	8001de4 <HAL_RCC_OscConfig+0x538>
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001d80:	4b1b      	ldr	r3, [pc, #108]	; (8001df0 <HAL_RCC_OscConfig+0x544>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d028      	beq.n	8001de0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d121      	bne.n	8001de0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d11a      	bne.n	8001de0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001db0:	4013      	ands	r3, r2
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001db6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d111      	bne.n	8001de0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc6:	085b      	lsrs	r3, r3, #1
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d107      	bne.n	8001de0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dda:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d001      	beq.n	8001de4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e000      	b.n	8001de6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40023800 	.word	0x40023800

08001df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0d0      	b.n	8001fae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e0c:	4b6a      	ldr	r3, [pc, #424]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 030f 	and.w	r3, r3, #15
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d910      	bls.n	8001e3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1a:	4b67      	ldr	r3, [pc, #412]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f023 020f 	bic.w	r2, r3, #15
 8001e22:	4965      	ldr	r1, [pc, #404]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2a:	4b63      	ldr	r3, [pc, #396]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d001      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0b8      	b.n	8001fae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d020      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d005      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e54:	4b59      	ldr	r3, [pc, #356]	; (8001fbc <HAL_RCC_ClockConfig+0x1c8>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	4a58      	ldr	r2, [pc, #352]	; (8001fbc <HAL_RCC_ClockConfig+0x1c8>)
 8001e5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0308 	and.w	r3, r3, #8
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d005      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e6c:	4b53      	ldr	r3, [pc, #332]	; (8001fbc <HAL_RCC_ClockConfig+0x1c8>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	4a52      	ldr	r2, [pc, #328]	; (8001fbc <HAL_RCC_ClockConfig+0x1c8>)
 8001e72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e78:	4b50      	ldr	r3, [pc, #320]	; (8001fbc <HAL_RCC_ClockConfig+0x1c8>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	494d      	ldr	r1, [pc, #308]	; (8001fbc <HAL_RCC_ClockConfig+0x1c8>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d040      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d107      	bne.n	8001eae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9e:	4b47      	ldr	r3, [pc, #284]	; (8001fbc <HAL_RCC_ClockConfig+0x1c8>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d115      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e07f      	b.n	8001fae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d107      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb6:	4b41      	ldr	r3, [pc, #260]	; (8001fbc <HAL_RCC_ClockConfig+0x1c8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d109      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e073      	b.n	8001fae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec6:	4b3d      	ldr	r3, [pc, #244]	; (8001fbc <HAL_RCC_ClockConfig+0x1c8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e06b      	b.n	8001fae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ed6:	4b39      	ldr	r3, [pc, #228]	; (8001fbc <HAL_RCC_ClockConfig+0x1c8>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f023 0203 	bic.w	r2, r3, #3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	4936      	ldr	r1, [pc, #216]	; (8001fbc <HAL_RCC_ClockConfig+0x1c8>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ee8:	f7ff f8ac 	bl	8001044 <HAL_GetTick>
 8001eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eee:	e00a      	b.n	8001f06 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef0:	f7ff f8a8 	bl	8001044 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e053      	b.n	8001fae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f06:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <HAL_RCC_ClockConfig+0x1c8>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 020c 	and.w	r2, r3, #12
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d1eb      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f18:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 030f 	and.w	r3, r3, #15
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d210      	bcs.n	8001f48 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f26:	4b24      	ldr	r3, [pc, #144]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 020f 	bic.w	r2, r3, #15
 8001f2e:	4922      	ldr	r1, [pc, #136]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f36:	4b20      	ldr	r3, [pc, #128]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d001      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e032      	b.n	8001fae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d008      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f54:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <HAL_RCC_ClockConfig+0x1c8>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	4916      	ldr	r1, [pc, #88]	; (8001fbc <HAL_RCC_ClockConfig+0x1c8>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d009      	beq.n	8001f86 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f72:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_RCC_ClockConfig+0x1c8>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	490e      	ldr	r1, [pc, #56]	; (8001fbc <HAL_RCC_ClockConfig+0x1c8>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f86:	f000 f821 	bl	8001fcc <HAL_RCC_GetSysClockFreq>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <HAL_RCC_ClockConfig+0x1c8>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	091b      	lsrs	r3, r3, #4
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	490a      	ldr	r1, [pc, #40]	; (8001fc0 <HAL_RCC_ClockConfig+0x1cc>)
 8001f98:	5ccb      	ldrb	r3, [r1, r3]
 8001f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f9e:	4a09      	ldr	r2, [pc, #36]	; (8001fc4 <HAL_RCC_ClockConfig+0x1d0>)
 8001fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <HAL_RCC_ClockConfig+0x1d4>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff f808 	bl	8000fbc <HAL_InitTick>

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40023c00 	.word	0x40023c00
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	08003fe0 	.word	0x08003fe0
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	20000004 	.word	0x20000004

08001fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fd0:	b094      	sub	sp, #80	; 0x50
 8001fd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	647b      	str	r3, [r7, #68]	; 0x44
 8001fd8:	2300      	movs	r3, #0
 8001fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fdc:	2300      	movs	r3, #0
 8001fde:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fe4:	4b79      	ldr	r3, [pc, #484]	; (80021cc <HAL_RCC_GetSysClockFreq+0x200>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 030c 	and.w	r3, r3, #12
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d00d      	beq.n	800200c <HAL_RCC_GetSysClockFreq+0x40>
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	f200 80e1 	bhi.w	80021b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d002      	beq.n	8002000 <HAL_RCC_GetSysClockFreq+0x34>
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d003      	beq.n	8002006 <HAL_RCC_GetSysClockFreq+0x3a>
 8001ffe:	e0db      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002000:	4b73      	ldr	r3, [pc, #460]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002002:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002004:	e0db      	b.n	80021be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002006:	4b73      	ldr	r3, [pc, #460]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002008:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800200a:	e0d8      	b.n	80021be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800200c:	4b6f      	ldr	r3, [pc, #444]	; (80021cc <HAL_RCC_GetSysClockFreq+0x200>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002014:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002016:	4b6d      	ldr	r3, [pc, #436]	; (80021cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d063      	beq.n	80020ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002022:	4b6a      	ldr	r3, [pc, #424]	; (80021cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	099b      	lsrs	r3, r3, #6
 8002028:	2200      	movs	r2, #0
 800202a:	63bb      	str	r3, [r7, #56]	; 0x38
 800202c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800202e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002034:	633b      	str	r3, [r7, #48]	; 0x30
 8002036:	2300      	movs	r3, #0
 8002038:	637b      	str	r3, [r7, #52]	; 0x34
 800203a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800203e:	4622      	mov	r2, r4
 8002040:	462b      	mov	r3, r5
 8002042:	f04f 0000 	mov.w	r0, #0
 8002046:	f04f 0100 	mov.w	r1, #0
 800204a:	0159      	lsls	r1, r3, #5
 800204c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002050:	0150      	lsls	r0, r2, #5
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	4621      	mov	r1, r4
 8002058:	1a51      	subs	r1, r2, r1
 800205a:	6139      	str	r1, [r7, #16]
 800205c:	4629      	mov	r1, r5
 800205e:	eb63 0301 	sbc.w	r3, r3, r1
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	f04f 0300 	mov.w	r3, #0
 800206c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002070:	4659      	mov	r1, fp
 8002072:	018b      	lsls	r3, r1, #6
 8002074:	4651      	mov	r1, sl
 8002076:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800207a:	4651      	mov	r1, sl
 800207c:	018a      	lsls	r2, r1, #6
 800207e:	4651      	mov	r1, sl
 8002080:	ebb2 0801 	subs.w	r8, r2, r1
 8002084:	4659      	mov	r1, fp
 8002086:	eb63 0901 	sbc.w	r9, r3, r1
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	f04f 0300 	mov.w	r3, #0
 8002092:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002096:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800209a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800209e:	4690      	mov	r8, r2
 80020a0:	4699      	mov	r9, r3
 80020a2:	4623      	mov	r3, r4
 80020a4:	eb18 0303 	adds.w	r3, r8, r3
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	462b      	mov	r3, r5
 80020ac:	eb49 0303 	adc.w	r3, r9, r3
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	f04f 0300 	mov.w	r3, #0
 80020ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020be:	4629      	mov	r1, r5
 80020c0:	024b      	lsls	r3, r1, #9
 80020c2:	4621      	mov	r1, r4
 80020c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020c8:	4621      	mov	r1, r4
 80020ca:	024a      	lsls	r2, r1, #9
 80020cc:	4610      	mov	r0, r2
 80020ce:	4619      	mov	r1, r3
 80020d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020d2:	2200      	movs	r2, #0
 80020d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80020d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020dc:	f7fe f894 	bl	8000208 <__aeabi_uldivmod>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4613      	mov	r3, r2
 80020e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020e8:	e058      	b.n	800219c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020ea:	4b38      	ldr	r3, [pc, #224]	; (80021cc <HAL_RCC_GetSysClockFreq+0x200>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	099b      	lsrs	r3, r3, #6
 80020f0:	2200      	movs	r2, #0
 80020f2:	4618      	mov	r0, r3
 80020f4:	4611      	mov	r1, r2
 80020f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020fa:	623b      	str	r3, [r7, #32]
 80020fc:	2300      	movs	r3, #0
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002100:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002104:	4642      	mov	r2, r8
 8002106:	464b      	mov	r3, r9
 8002108:	f04f 0000 	mov.w	r0, #0
 800210c:	f04f 0100 	mov.w	r1, #0
 8002110:	0159      	lsls	r1, r3, #5
 8002112:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002116:	0150      	lsls	r0, r2, #5
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4641      	mov	r1, r8
 800211e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002122:	4649      	mov	r1, r9
 8002124:	eb63 0b01 	sbc.w	fp, r3, r1
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002134:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002138:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800213c:	ebb2 040a 	subs.w	r4, r2, sl
 8002140:	eb63 050b 	sbc.w	r5, r3, fp
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	f04f 0300 	mov.w	r3, #0
 800214c:	00eb      	lsls	r3, r5, #3
 800214e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002152:	00e2      	lsls	r2, r4, #3
 8002154:	4614      	mov	r4, r2
 8002156:	461d      	mov	r5, r3
 8002158:	4643      	mov	r3, r8
 800215a:	18e3      	adds	r3, r4, r3
 800215c:	603b      	str	r3, [r7, #0]
 800215e:	464b      	mov	r3, r9
 8002160:	eb45 0303 	adc.w	r3, r5, r3
 8002164:	607b      	str	r3, [r7, #4]
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	f04f 0300 	mov.w	r3, #0
 800216e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002172:	4629      	mov	r1, r5
 8002174:	028b      	lsls	r3, r1, #10
 8002176:	4621      	mov	r1, r4
 8002178:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800217c:	4621      	mov	r1, r4
 800217e:	028a      	lsls	r2, r1, #10
 8002180:	4610      	mov	r0, r2
 8002182:	4619      	mov	r1, r3
 8002184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002186:	2200      	movs	r2, #0
 8002188:	61bb      	str	r3, [r7, #24]
 800218a:	61fa      	str	r2, [r7, #28]
 800218c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002190:	f7fe f83a 	bl	8000208 <__aeabi_uldivmod>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4613      	mov	r3, r2
 800219a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <HAL_RCC_GetSysClockFreq+0x200>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	0c1b      	lsrs	r3, r3, #16
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	3301      	adds	r3, #1
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80021ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021b6:	e002      	b.n	80021be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021b8:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80021ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3750      	adds	r7, #80	; 0x50
 80021c4:	46bd      	mov	sp, r7
 80021c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ca:	bf00      	nop
 80021cc:	40023800 	.word	0x40023800
 80021d0:	00f42400 	.word	0x00f42400
 80021d4:	007a1200 	.word	0x007a1200

080021d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021dc:	4b03      	ldr	r3, [pc, #12]	; (80021ec <HAL_RCC_GetHCLKFreq+0x14>)
 80021de:	681b      	ldr	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	20000000 	.word	0x20000000

080021f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021f4:	f7ff fff0 	bl	80021d8 <HAL_RCC_GetHCLKFreq>
 80021f8:	4602      	mov	r2, r0
 80021fa:	4b05      	ldr	r3, [pc, #20]	; (8002210 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	0a9b      	lsrs	r3, r3, #10
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	4903      	ldr	r1, [pc, #12]	; (8002214 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002206:	5ccb      	ldrb	r3, [r1, r3]
 8002208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800220c:	4618      	mov	r0, r3
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40023800 	.word	0x40023800
 8002214:	08003ff0 	.word	0x08003ff0

08002218 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800221c:	f7ff ffdc 	bl	80021d8 <HAL_RCC_GetHCLKFreq>
 8002220:	4602      	mov	r2, r0
 8002222:	4b05      	ldr	r3, [pc, #20]	; (8002238 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	0b5b      	lsrs	r3, r3, #13
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	4903      	ldr	r1, [pc, #12]	; (800223c <HAL_RCC_GetPCLK2Freq+0x24>)
 800222e:	5ccb      	ldrb	r3, [r1, r3]
 8002230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002234:	4618      	mov	r0, r3
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40023800 	.word	0x40023800
 800223c:	08003ff0 	.word	0x08003ff0

08002240 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b088      	sub	sp, #32
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800224c:	2300      	movs	r3, #0
 800224e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	d012      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002268:	4b69      	ldr	r3, [pc, #420]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	4a68      	ldr	r2, [pc, #416]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800226e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002272:	6093      	str	r3, [r2, #8]
 8002274:	4b66      	ldr	r3, [pc, #408]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800227c:	4964      	ldr	r1, [pc, #400]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800227e:	4313      	orrs	r3, r2
 8002280:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800228a:	2301      	movs	r3, #1
 800228c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d017      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800229a:	4b5d      	ldr	r3, [pc, #372]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800229c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a8:	4959      	ldr	r1, [pc, #356]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022b8:	d101      	bne.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80022ba:	2301      	movs	r3, #1
 80022bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80022c6:	2301      	movs	r3, #1
 80022c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d017      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022d6:	4b4e      	ldr	r3, [pc, #312]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	494a      	ldr	r1, [pc, #296]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022f4:	d101      	bne.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80022f6:	2301      	movs	r3, #1
 80022f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002302:	2301      	movs	r3, #1
 8002304:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002312:	2301      	movs	r3, #1
 8002314:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0320 	and.w	r3, r3, #32
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 808b 	beq.w	800243a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002324:	4b3a      	ldr	r3, [pc, #232]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	4a39      	ldr	r2, [pc, #228]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800232a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800232e:	6413      	str	r3, [r2, #64]	; 0x40
 8002330:	4b37      	ldr	r3, [pc, #220]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800233c:	4b35      	ldr	r3, [pc, #212]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a34      	ldr	r2, [pc, #208]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002346:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002348:	f7fe fe7c 	bl	8001044 <HAL_GetTick>
 800234c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002350:	f7fe fe78 	bl	8001044 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	; 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e357      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002362:	4b2c      	ldr	r3, [pc, #176]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800236e:	4b28      	ldr	r3, [pc, #160]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002376:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d035      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	429a      	cmp	r2, r3
 800238a:	d02e      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800238c:	4b20      	ldr	r3, [pc, #128]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800238e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002394:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002396:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239a:	4a1d      	ldr	r2, [pc, #116]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800239c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023a2:	4b1b      	ldr	r3, [pc, #108]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a6:	4a1a      	ldr	r2, [pc, #104]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80023ae:	4a18      	ldr	r2, [pc, #96]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80023b4:	4b16      	ldr	r3, [pc, #88]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d114      	bne.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7fe fe40 	bl	8001044 <HAL_GetTick>
 80023c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c6:	e00a      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c8:	f7fe fe3c 	bl	8001044 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d901      	bls.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e319      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023de:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0ee      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023f6:	d111      	bne.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002404:	4b04      	ldr	r3, [pc, #16]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002406:	400b      	ands	r3, r1
 8002408:	4901      	ldr	r1, [pc, #4]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800240a:	4313      	orrs	r3, r2
 800240c:	608b      	str	r3, [r1, #8]
 800240e:	e00b      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002410:	40023800 	.word	0x40023800
 8002414:	40007000 	.word	0x40007000
 8002418:	0ffffcff 	.word	0x0ffffcff
 800241c:	4baa      	ldr	r3, [pc, #680]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4aa9      	ldr	r2, [pc, #676]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002422:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002426:	6093      	str	r3, [r2, #8]
 8002428:	4ba7      	ldr	r3, [pc, #668]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800242a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002434:	49a4      	ldr	r1, [pc, #656]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002436:	4313      	orrs	r3, r2
 8002438:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0310 	and.w	r3, r3, #16
 8002442:	2b00      	cmp	r3, #0
 8002444:	d010      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002446:	4ba0      	ldr	r3, [pc, #640]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800244c:	4a9e      	ldr	r2, [pc, #632]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800244e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002452:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002456:	4b9c      	ldr	r3, [pc, #624]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002458:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002460:	4999      	ldr	r1, [pc, #612]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002462:	4313      	orrs	r3, r2
 8002464:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00a      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002474:	4b94      	ldr	r3, [pc, #592]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002482:	4991      	ldr	r1, [pc, #580]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002484:	4313      	orrs	r3, r2
 8002486:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00a      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002496:	4b8c      	ldr	r3, [pc, #560]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024a4:	4988      	ldr	r1, [pc, #544]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00a      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024b8:	4b83      	ldr	r3, [pc, #524]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024c6:	4980      	ldr	r1, [pc, #512]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00a      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80024da:	4b7b      	ldr	r3, [pc, #492]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e8:	4977      	ldr	r1, [pc, #476]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00a      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024fc:	4b72      	ldr	r3, [pc, #456]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002502:	f023 0203 	bic.w	r2, r3, #3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	496f      	ldr	r1, [pc, #444]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00a      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800251e:	4b6a      	ldr	r3, [pc, #424]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002524:	f023 020c 	bic.w	r2, r3, #12
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800252c:	4966      	ldr	r1, [pc, #408]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00a      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002540:	4b61      	ldr	r3, [pc, #388]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002546:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254e:	495e      	ldr	r1, [pc, #376]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00a      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002562:	4b59      	ldr	r3, [pc, #356]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002568:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002570:	4955      	ldr	r1, [pc, #340]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002572:	4313      	orrs	r3, r2
 8002574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00a      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002584:	4b50      	ldr	r3, [pc, #320]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002592:	494d      	ldr	r1, [pc, #308]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002594:	4313      	orrs	r3, r2
 8002596:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00a      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80025a6:	4b48      	ldr	r3, [pc, #288]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b4:	4944      	ldr	r1, [pc, #272]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00a      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80025c8:	4b3f      	ldr	r3, [pc, #252]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d6:	493c      	ldr	r1, [pc, #240]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00a      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80025ea:	4b37      	ldr	r3, [pc, #220]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f8:	4933      	ldr	r1, [pc, #204]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00a      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800260c:	4b2e      	ldr	r3, [pc, #184]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800260e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002612:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800261a:	492b      	ldr	r1, [pc, #172]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d011      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800262e:	4b26      	ldr	r3, [pc, #152]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002634:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800263c:	4922      	ldr	r1, [pc, #136]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800263e:	4313      	orrs	r3, r2
 8002640:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002648:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800264c:	d101      	bne.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800264e:	2301      	movs	r3, #1
 8002650:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800265e:	2301      	movs	r3, #1
 8002660:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00a      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800266e:	4b16      	ldr	r3, [pc, #88]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002674:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800267c:	4912      	ldr	r1, [pc, #72]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800267e:	4313      	orrs	r3, r2
 8002680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00b      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002690:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002696:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026a0:	4909      	ldr	r1, [pc, #36]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d006      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 80d9 	beq.w	800286e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80026bc:	4b02      	ldr	r3, [pc, #8]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a01      	ldr	r2, [pc, #4]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026c6:	e001      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80026c8:	40023800 	.word	0x40023800
 80026cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026ce:	f7fe fcb9 	bl	8001044 <HAL_GetTick>
 80026d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026d4:	e008      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80026d6:	f7fe fcb5 	bl	8001044 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b64      	cmp	r3, #100	; 0x64
 80026e2:	d901      	bls.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e194      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026e8:	4b6c      	ldr	r3, [pc, #432]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f0      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d021      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002704:	2b00      	cmp	r3, #0
 8002706:	d11d      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002708:	4b64      	ldr	r3, [pc, #400]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800270a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800270e:	0c1b      	lsrs	r3, r3, #16
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002716:	4b61      	ldr	r3, [pc, #388]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800271c:	0e1b      	lsrs	r3, r3, #24
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	019a      	lsls	r2, r3, #6
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	041b      	lsls	r3, r3, #16
 800272e:	431a      	orrs	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	061b      	lsls	r3, r3, #24
 8002734:	431a      	orrs	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	071b      	lsls	r3, r3, #28
 800273c:	4957      	ldr	r1, [pc, #348]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d004      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002754:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002758:	d00a      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002762:	2b00      	cmp	r3, #0
 8002764:	d02e      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800276e:	d129      	bne.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002770:	4b4a      	ldr	r3, [pc, #296]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002776:	0c1b      	lsrs	r3, r3, #16
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800277e:	4b47      	ldr	r3, [pc, #284]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002784:	0f1b      	lsrs	r3, r3, #28
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	019a      	lsls	r2, r3, #6
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	041b      	lsls	r3, r3, #16
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	061b      	lsls	r3, r3, #24
 800279e:	431a      	orrs	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	071b      	lsls	r3, r3, #28
 80027a4:	493d      	ldr	r1, [pc, #244]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80027ac:	4b3b      	ldr	r3, [pc, #236]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027b2:	f023 021f 	bic.w	r2, r3, #31
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	3b01      	subs	r3, #1
 80027bc:	4937      	ldr	r1, [pc, #220]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d01d      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027d0:	4b32      	ldr	r3, [pc, #200]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027d6:	0e1b      	lsrs	r3, r3, #24
 80027d8:	f003 030f 	and.w	r3, r3, #15
 80027dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027de:	4b2f      	ldr	r3, [pc, #188]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027e4:	0f1b      	lsrs	r3, r3, #28
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	019a      	lsls	r2, r3, #6
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	041b      	lsls	r3, r3, #16
 80027f8:	431a      	orrs	r2, r3
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	061b      	lsls	r3, r3, #24
 80027fe:	431a      	orrs	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	071b      	lsls	r3, r3, #28
 8002804:	4925      	ldr	r1, [pc, #148]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d011      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	019a      	lsls	r2, r3, #6
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	041b      	lsls	r3, r3, #16
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	061b      	lsls	r3, r3, #24
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	071b      	lsls	r3, r3, #28
 8002834:	4919      	ldr	r1, [pc, #100]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800283c:	4b17      	ldr	r3, [pc, #92]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a16      	ldr	r2, [pc, #88]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002842:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002846:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002848:	f7fe fbfc 	bl	8001044 <HAL_GetTick>
 800284c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002850:	f7fe fbf8 	bl	8001044 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b64      	cmp	r3, #100	; 0x64
 800285c:	d901      	bls.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e0d7      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002862:	4b0e      	ldr	r3, [pc, #56]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f0      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	2b01      	cmp	r3, #1
 8002872:	f040 80cd 	bne.w	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002876:	4b09      	ldr	r3, [pc, #36]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a08      	ldr	r2, [pc, #32]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800287c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002880:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002882:	f7fe fbdf 	bl	8001044 <HAL_GetTick>
 8002886:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002888:	e00a      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800288a:	f7fe fbdb 	bl	8001044 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b64      	cmp	r3, #100	; 0x64
 8002896:	d903      	bls.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e0ba      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800289c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028a0:	4b5e      	ldr	r3, [pc, #376]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028ac:	d0ed      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d009      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d02e      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d12a      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028d6:	4b51      	ldr	r3, [pc, #324]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028dc:	0c1b      	lsrs	r3, r3, #16
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80028e4:	4b4d      	ldr	r3, [pc, #308]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ea:	0f1b      	lsrs	r3, r3, #28
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	019a      	lsls	r2, r3, #6
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	041b      	lsls	r3, r3, #16
 80028fc:	431a      	orrs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	061b      	lsls	r3, r3, #24
 8002904:	431a      	orrs	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	071b      	lsls	r3, r3, #28
 800290a:	4944      	ldr	r1, [pc, #272]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800290c:	4313      	orrs	r3, r2
 800290e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002912:	4b42      	ldr	r3, [pc, #264]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002918:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	3b01      	subs	r3, #1
 8002922:	021b      	lsls	r3, r3, #8
 8002924:	493d      	ldr	r1, [pc, #244]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d022      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800293c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002940:	d11d      	bne.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002942:	4b36      	ldr	r3, [pc, #216]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002948:	0e1b      	lsrs	r3, r3, #24
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002950:	4b32      	ldr	r3, [pc, #200]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002956:	0f1b      	lsrs	r3, r3, #28
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	019a      	lsls	r2, r3, #6
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	041b      	lsls	r3, r3, #16
 800296a:	431a      	orrs	r2, r3
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	061b      	lsls	r3, r3, #24
 8002970:	431a      	orrs	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	071b      	lsls	r3, r3, #28
 8002976:	4929      	ldr	r1, [pc, #164]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d028      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800298a:	4b24      	ldr	r3, [pc, #144]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800298c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002990:	0e1b      	lsrs	r3, r3, #24
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002998:	4b20      	ldr	r3, [pc, #128]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299e:	0c1b      	lsrs	r3, r3, #16
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	019a      	lsls	r2, r3, #6
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	041b      	lsls	r3, r3, #16
 80029b0:	431a      	orrs	r2, r3
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	061b      	lsls	r3, r3, #24
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	071b      	lsls	r3, r3, #28
 80029be:	4917      	ldr	r1, [pc, #92]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80029c6:	4b15      	ldr	r3, [pc, #84]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d4:	4911      	ldr	r1, [pc, #68]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80029dc:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a0e      	ldr	r2, [pc, #56]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029e8:	f7fe fb2c 	bl	8001044 <HAL_GetTick>
 80029ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80029f0:	f7fe fb28 	bl	8001044 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	; 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e007      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a0e:	d1ef      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3720      	adds	r7, #32
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40023800 	.word	0x40023800

08002a20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e049      	b.n	8002ac6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d106      	bne.n	8002a4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7fe f94c 	bl	8000ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3304      	adds	r3, #4
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4610      	mov	r0, r2
 8002a60:	f000 f970 	bl	8002d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d001      	beq.n	8002ae8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e04c      	b.n	8002b82 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a26      	ldr	r2, [pc, #152]	; (8002b90 <HAL_TIM_Base_Start+0xc0>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d022      	beq.n	8002b40 <HAL_TIM_Base_Start+0x70>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b02:	d01d      	beq.n	8002b40 <HAL_TIM_Base_Start+0x70>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a22      	ldr	r2, [pc, #136]	; (8002b94 <HAL_TIM_Base_Start+0xc4>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d018      	beq.n	8002b40 <HAL_TIM_Base_Start+0x70>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a21      	ldr	r2, [pc, #132]	; (8002b98 <HAL_TIM_Base_Start+0xc8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d013      	beq.n	8002b40 <HAL_TIM_Base_Start+0x70>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a1f      	ldr	r2, [pc, #124]	; (8002b9c <HAL_TIM_Base_Start+0xcc>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d00e      	beq.n	8002b40 <HAL_TIM_Base_Start+0x70>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a1e      	ldr	r2, [pc, #120]	; (8002ba0 <HAL_TIM_Base_Start+0xd0>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d009      	beq.n	8002b40 <HAL_TIM_Base_Start+0x70>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a1c      	ldr	r2, [pc, #112]	; (8002ba4 <HAL_TIM_Base_Start+0xd4>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d004      	beq.n	8002b40 <HAL_TIM_Base_Start+0x70>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a1b      	ldr	r2, [pc, #108]	; (8002ba8 <HAL_TIM_Base_Start+0xd8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d115      	bne.n	8002b6c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	4b19      	ldr	r3, [pc, #100]	; (8002bac <HAL_TIM_Base_Start+0xdc>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2b06      	cmp	r3, #6
 8002b50:	d015      	beq.n	8002b7e <HAL_TIM_Base_Start+0xae>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b58:	d011      	beq.n	8002b7e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 0201 	orr.w	r2, r2, #1
 8002b68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b6a:	e008      	b.n	8002b7e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0201 	orr.w	r2, r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	e000      	b.n	8002b80 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40010000 	.word	0x40010000
 8002b94:	40000400 	.word	0x40000400
 8002b98:	40000800 	.word	0x40000800
 8002b9c:	40000c00 	.word	0x40000c00
 8002ba0:	40010400 	.word	0x40010400
 8002ba4:	40014000 	.word	0x40014000
 8002ba8:	40001800 	.word	0x40001800
 8002bac:	00010007 	.word	0x00010007

08002bb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_TIM_ConfigClockSource+0x1c>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e0b4      	b.n	8002d36 <HAL_TIM_ConfigClockSource+0x186>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002be4:	68ba      	ldr	r2, [r7, #8]
 8002be6:	4b56      	ldr	r3, [pc, #344]	; (8002d40 <HAL_TIM_ConfigClockSource+0x190>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bf2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c04:	d03e      	beq.n	8002c84 <HAL_TIM_ConfigClockSource+0xd4>
 8002c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c0a:	f200 8087 	bhi.w	8002d1c <HAL_TIM_ConfigClockSource+0x16c>
 8002c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c12:	f000 8086 	beq.w	8002d22 <HAL_TIM_ConfigClockSource+0x172>
 8002c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c1a:	d87f      	bhi.n	8002d1c <HAL_TIM_ConfigClockSource+0x16c>
 8002c1c:	2b70      	cmp	r3, #112	; 0x70
 8002c1e:	d01a      	beq.n	8002c56 <HAL_TIM_ConfigClockSource+0xa6>
 8002c20:	2b70      	cmp	r3, #112	; 0x70
 8002c22:	d87b      	bhi.n	8002d1c <HAL_TIM_ConfigClockSource+0x16c>
 8002c24:	2b60      	cmp	r3, #96	; 0x60
 8002c26:	d050      	beq.n	8002cca <HAL_TIM_ConfigClockSource+0x11a>
 8002c28:	2b60      	cmp	r3, #96	; 0x60
 8002c2a:	d877      	bhi.n	8002d1c <HAL_TIM_ConfigClockSource+0x16c>
 8002c2c:	2b50      	cmp	r3, #80	; 0x50
 8002c2e:	d03c      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0xfa>
 8002c30:	2b50      	cmp	r3, #80	; 0x50
 8002c32:	d873      	bhi.n	8002d1c <HAL_TIM_ConfigClockSource+0x16c>
 8002c34:	2b40      	cmp	r3, #64	; 0x40
 8002c36:	d058      	beq.n	8002cea <HAL_TIM_ConfigClockSource+0x13a>
 8002c38:	2b40      	cmp	r3, #64	; 0x40
 8002c3a:	d86f      	bhi.n	8002d1c <HAL_TIM_ConfigClockSource+0x16c>
 8002c3c:	2b30      	cmp	r3, #48	; 0x30
 8002c3e:	d064      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0x15a>
 8002c40:	2b30      	cmp	r3, #48	; 0x30
 8002c42:	d86b      	bhi.n	8002d1c <HAL_TIM_ConfigClockSource+0x16c>
 8002c44:	2b20      	cmp	r3, #32
 8002c46:	d060      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0x15a>
 8002c48:	2b20      	cmp	r3, #32
 8002c4a:	d867      	bhi.n	8002d1c <HAL_TIM_ConfigClockSource+0x16c>
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d05c      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0x15a>
 8002c50:	2b10      	cmp	r3, #16
 8002c52:	d05a      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0x15a>
 8002c54:	e062      	b.n	8002d1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	6899      	ldr	r1, [r3, #8]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f000 f987 	bl	8002f78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	609a      	str	r2, [r3, #8]
      break;
 8002c82:	e04f      	b.n	8002d24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	6899      	ldr	r1, [r3, #8]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f000 f970 	bl	8002f78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ca6:	609a      	str	r2, [r3, #8]
      break;
 8002ca8:	e03c      	b.n	8002d24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	6859      	ldr	r1, [r3, #4]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	f000 f8e4 	bl	8002e84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2150      	movs	r1, #80	; 0x50
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 f93d 	bl	8002f42 <TIM_ITRx_SetConfig>
      break;
 8002cc8:	e02c      	b.n	8002d24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	6859      	ldr	r1, [r3, #4]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	f000 f903 	bl	8002ee2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2160      	movs	r1, #96	; 0x60
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 f92d 	bl	8002f42 <TIM_ITRx_SetConfig>
      break;
 8002ce8:	e01c      	b.n	8002d24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6818      	ldr	r0, [r3, #0]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	6859      	ldr	r1, [r3, #4]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	f000 f8c4 	bl	8002e84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2140      	movs	r1, #64	; 0x40
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 f91d 	bl	8002f42 <TIM_ITRx_SetConfig>
      break;
 8002d08:	e00c      	b.n	8002d24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4619      	mov	r1, r3
 8002d14:	4610      	mov	r0, r2
 8002d16:	f000 f914 	bl	8002f42 <TIM_ITRx_SetConfig>
      break;
 8002d1a:	e003      	b.n	8002d24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d20:	e000      	b.n	8002d24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	fffeff88 	.word	0xfffeff88

08002d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a40      	ldr	r2, [pc, #256]	; (8002e58 <TIM_Base_SetConfig+0x114>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d013      	beq.n	8002d84 <TIM_Base_SetConfig+0x40>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d62:	d00f      	beq.n	8002d84 <TIM_Base_SetConfig+0x40>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a3d      	ldr	r2, [pc, #244]	; (8002e5c <TIM_Base_SetConfig+0x118>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d00b      	beq.n	8002d84 <TIM_Base_SetConfig+0x40>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a3c      	ldr	r2, [pc, #240]	; (8002e60 <TIM_Base_SetConfig+0x11c>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d007      	beq.n	8002d84 <TIM_Base_SetConfig+0x40>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a3b      	ldr	r2, [pc, #236]	; (8002e64 <TIM_Base_SetConfig+0x120>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d003      	beq.n	8002d84 <TIM_Base_SetConfig+0x40>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a3a      	ldr	r2, [pc, #232]	; (8002e68 <TIM_Base_SetConfig+0x124>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d108      	bne.n	8002d96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a2f      	ldr	r2, [pc, #188]	; (8002e58 <TIM_Base_SetConfig+0x114>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d02b      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da4:	d027      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a2c      	ldr	r2, [pc, #176]	; (8002e5c <TIM_Base_SetConfig+0x118>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d023      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a2b      	ldr	r2, [pc, #172]	; (8002e60 <TIM_Base_SetConfig+0x11c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d01f      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a2a      	ldr	r2, [pc, #168]	; (8002e64 <TIM_Base_SetConfig+0x120>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d01b      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a29      	ldr	r2, [pc, #164]	; (8002e68 <TIM_Base_SetConfig+0x124>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d017      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a28      	ldr	r2, [pc, #160]	; (8002e6c <TIM_Base_SetConfig+0x128>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d013      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a27      	ldr	r2, [pc, #156]	; (8002e70 <TIM_Base_SetConfig+0x12c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d00f      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a26      	ldr	r2, [pc, #152]	; (8002e74 <TIM_Base_SetConfig+0x130>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00b      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a25      	ldr	r2, [pc, #148]	; (8002e78 <TIM_Base_SetConfig+0x134>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d007      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a24      	ldr	r2, [pc, #144]	; (8002e7c <TIM_Base_SetConfig+0x138>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d003      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a23      	ldr	r2, [pc, #140]	; (8002e80 <TIM_Base_SetConfig+0x13c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d108      	bne.n	8002e08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a0a      	ldr	r2, [pc, #40]	; (8002e58 <TIM_Base_SetConfig+0x114>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d003      	beq.n	8002e3c <TIM_Base_SetConfig+0xf8>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a0c      	ldr	r2, [pc, #48]	; (8002e68 <TIM_Base_SetConfig+0x124>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d103      	bne.n	8002e44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	615a      	str	r2, [r3, #20]
}
 8002e4a:	bf00      	nop
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40010000 	.word	0x40010000
 8002e5c:	40000400 	.word	0x40000400
 8002e60:	40000800 	.word	0x40000800
 8002e64:	40000c00 	.word	0x40000c00
 8002e68:	40010400 	.word	0x40010400
 8002e6c:	40014000 	.word	0x40014000
 8002e70:	40014400 	.word	0x40014400
 8002e74:	40014800 	.word	0x40014800
 8002e78:	40001800 	.word	0x40001800
 8002e7c:	40001c00 	.word	0x40001c00
 8002e80:	40002000 	.word	0x40002000

08002e84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	f023 0201 	bic.w	r2, r3, #1
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	011b      	lsls	r3, r3, #4
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f023 030a 	bic.w	r3, r3, #10
 8002ec0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	621a      	str	r2, [r3, #32]
}
 8002ed6:	bf00      	nop
 8002ed8:	371c      	adds	r7, #28
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b087      	sub	sp, #28
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	f023 0210 	bic.w	r2, r3, #16
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	031b      	lsls	r3, r3, #12
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	621a      	str	r2, [r3, #32]
}
 8002f36:	bf00      	nop
 8002f38:	371c      	adds	r7, #28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b085      	sub	sp, #20
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
 8002f4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f043 0307 	orr.w	r3, r3, #7
 8002f64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	609a      	str	r2, [r3, #8]
}
 8002f6c:	bf00      	nop
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
 8002f84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	021a      	lsls	r2, r3, #8
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	609a      	str	r2, [r3, #8]
}
 8002fac:	bf00      	nop
 8002fae:	371c      	adds	r7, #28
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e06d      	b.n	80030ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a30      	ldr	r2, [pc, #192]	; (80030b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d004      	beq.n	8003004 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a2f      	ldr	r2, [pc, #188]	; (80030bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d108      	bne.n	8003016 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800300a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800301c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	4313      	orrs	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a20      	ldr	r2, [pc, #128]	; (80030b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d022      	beq.n	8003080 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003042:	d01d      	beq.n	8003080 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a1d      	ldr	r2, [pc, #116]	; (80030c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d018      	beq.n	8003080 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a1c      	ldr	r2, [pc, #112]	; (80030c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d013      	beq.n	8003080 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a1a      	ldr	r2, [pc, #104]	; (80030c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d00e      	beq.n	8003080 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a15      	ldr	r2, [pc, #84]	; (80030bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d009      	beq.n	8003080 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a16      	ldr	r2, [pc, #88]	; (80030cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d004      	beq.n	8003080 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a15      	ldr	r2, [pc, #84]	; (80030d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d10c      	bne.n	800309a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003086:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	4313      	orrs	r3, r2
 8003090:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	40010000 	.word	0x40010000
 80030bc:	40010400 	.word	0x40010400
 80030c0:	40000400 	.word	0x40000400
 80030c4:	40000800 	.word	0x40000800
 80030c8:	40000c00 	.word	0x40000c00
 80030cc:	40014000 	.word	0x40014000
 80030d0:	40001800 	.word	0x40001800

080030d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e040      	b.n	8003168 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d106      	bne.n	80030fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fd fe14 	bl	8000d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2224      	movs	r2, #36	; 0x24
 8003100:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0201 	bic.w	r2, r2, #1
 8003110:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f82c 	bl	8003170 <UART_SetConfig>
 8003118:	4603      	mov	r3, r0
 800311a:	2b01      	cmp	r3, #1
 800311c:	d101      	bne.n	8003122 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e022      	b.n	8003168 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	2b00      	cmp	r3, #0
 8003128:	d002      	beq.n	8003130 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 fa84 	bl	8003638 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800313e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800314e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 fb0b 	bl	800377c <UART_CheckIdleState>
 8003166:	4603      	mov	r3, r0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003178:	2300      	movs	r3, #0
 800317a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	4ba6      	ldr	r3, [pc, #664]	; (8003434 <UART_SetConfig+0x2c4>)
 800319c:	4013      	ands	r3, r2
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6812      	ldr	r2, [r2, #0]
 80031a2:	6979      	ldr	r1, [r7, #20]
 80031a4:	430b      	orrs	r3, r1
 80031a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	430a      	orrs	r2, r1
 80031e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a94      	ldr	r2, [pc, #592]	; (8003438 <UART_SetConfig+0x2c8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d120      	bne.n	800322e <UART_SetConfig+0xbe>
 80031ec:	4b93      	ldr	r3, [pc, #588]	; (800343c <UART_SetConfig+0x2cc>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	2b03      	cmp	r3, #3
 80031f8:	d816      	bhi.n	8003228 <UART_SetConfig+0xb8>
 80031fa:	a201      	add	r2, pc, #4	; (adr r2, 8003200 <UART_SetConfig+0x90>)
 80031fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003200:	08003211 	.word	0x08003211
 8003204:	0800321d 	.word	0x0800321d
 8003208:	08003217 	.word	0x08003217
 800320c:	08003223 	.word	0x08003223
 8003210:	2301      	movs	r3, #1
 8003212:	77fb      	strb	r3, [r7, #31]
 8003214:	e150      	b.n	80034b8 <UART_SetConfig+0x348>
 8003216:	2302      	movs	r3, #2
 8003218:	77fb      	strb	r3, [r7, #31]
 800321a:	e14d      	b.n	80034b8 <UART_SetConfig+0x348>
 800321c:	2304      	movs	r3, #4
 800321e:	77fb      	strb	r3, [r7, #31]
 8003220:	e14a      	b.n	80034b8 <UART_SetConfig+0x348>
 8003222:	2308      	movs	r3, #8
 8003224:	77fb      	strb	r3, [r7, #31]
 8003226:	e147      	b.n	80034b8 <UART_SetConfig+0x348>
 8003228:	2310      	movs	r3, #16
 800322a:	77fb      	strb	r3, [r7, #31]
 800322c:	e144      	b.n	80034b8 <UART_SetConfig+0x348>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a83      	ldr	r2, [pc, #524]	; (8003440 <UART_SetConfig+0x2d0>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d132      	bne.n	800329e <UART_SetConfig+0x12e>
 8003238:	4b80      	ldr	r3, [pc, #512]	; (800343c <UART_SetConfig+0x2cc>)
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323e:	f003 030c 	and.w	r3, r3, #12
 8003242:	2b0c      	cmp	r3, #12
 8003244:	d828      	bhi.n	8003298 <UART_SetConfig+0x128>
 8003246:	a201      	add	r2, pc, #4	; (adr r2, 800324c <UART_SetConfig+0xdc>)
 8003248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324c:	08003281 	.word	0x08003281
 8003250:	08003299 	.word	0x08003299
 8003254:	08003299 	.word	0x08003299
 8003258:	08003299 	.word	0x08003299
 800325c:	0800328d 	.word	0x0800328d
 8003260:	08003299 	.word	0x08003299
 8003264:	08003299 	.word	0x08003299
 8003268:	08003299 	.word	0x08003299
 800326c:	08003287 	.word	0x08003287
 8003270:	08003299 	.word	0x08003299
 8003274:	08003299 	.word	0x08003299
 8003278:	08003299 	.word	0x08003299
 800327c:	08003293 	.word	0x08003293
 8003280:	2300      	movs	r3, #0
 8003282:	77fb      	strb	r3, [r7, #31]
 8003284:	e118      	b.n	80034b8 <UART_SetConfig+0x348>
 8003286:	2302      	movs	r3, #2
 8003288:	77fb      	strb	r3, [r7, #31]
 800328a:	e115      	b.n	80034b8 <UART_SetConfig+0x348>
 800328c:	2304      	movs	r3, #4
 800328e:	77fb      	strb	r3, [r7, #31]
 8003290:	e112      	b.n	80034b8 <UART_SetConfig+0x348>
 8003292:	2308      	movs	r3, #8
 8003294:	77fb      	strb	r3, [r7, #31]
 8003296:	e10f      	b.n	80034b8 <UART_SetConfig+0x348>
 8003298:	2310      	movs	r3, #16
 800329a:	77fb      	strb	r3, [r7, #31]
 800329c:	e10c      	b.n	80034b8 <UART_SetConfig+0x348>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a68      	ldr	r2, [pc, #416]	; (8003444 <UART_SetConfig+0x2d4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d120      	bne.n	80032ea <UART_SetConfig+0x17a>
 80032a8:	4b64      	ldr	r3, [pc, #400]	; (800343c <UART_SetConfig+0x2cc>)
 80032aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80032b2:	2b30      	cmp	r3, #48	; 0x30
 80032b4:	d013      	beq.n	80032de <UART_SetConfig+0x16e>
 80032b6:	2b30      	cmp	r3, #48	; 0x30
 80032b8:	d814      	bhi.n	80032e4 <UART_SetConfig+0x174>
 80032ba:	2b20      	cmp	r3, #32
 80032bc:	d009      	beq.n	80032d2 <UART_SetConfig+0x162>
 80032be:	2b20      	cmp	r3, #32
 80032c0:	d810      	bhi.n	80032e4 <UART_SetConfig+0x174>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <UART_SetConfig+0x15c>
 80032c6:	2b10      	cmp	r3, #16
 80032c8:	d006      	beq.n	80032d8 <UART_SetConfig+0x168>
 80032ca:	e00b      	b.n	80032e4 <UART_SetConfig+0x174>
 80032cc:	2300      	movs	r3, #0
 80032ce:	77fb      	strb	r3, [r7, #31]
 80032d0:	e0f2      	b.n	80034b8 <UART_SetConfig+0x348>
 80032d2:	2302      	movs	r3, #2
 80032d4:	77fb      	strb	r3, [r7, #31]
 80032d6:	e0ef      	b.n	80034b8 <UART_SetConfig+0x348>
 80032d8:	2304      	movs	r3, #4
 80032da:	77fb      	strb	r3, [r7, #31]
 80032dc:	e0ec      	b.n	80034b8 <UART_SetConfig+0x348>
 80032de:	2308      	movs	r3, #8
 80032e0:	77fb      	strb	r3, [r7, #31]
 80032e2:	e0e9      	b.n	80034b8 <UART_SetConfig+0x348>
 80032e4:	2310      	movs	r3, #16
 80032e6:	77fb      	strb	r3, [r7, #31]
 80032e8:	e0e6      	b.n	80034b8 <UART_SetConfig+0x348>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a56      	ldr	r2, [pc, #344]	; (8003448 <UART_SetConfig+0x2d8>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d120      	bne.n	8003336 <UART_SetConfig+0x1c6>
 80032f4:	4b51      	ldr	r3, [pc, #324]	; (800343c <UART_SetConfig+0x2cc>)
 80032f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032fe:	2bc0      	cmp	r3, #192	; 0xc0
 8003300:	d013      	beq.n	800332a <UART_SetConfig+0x1ba>
 8003302:	2bc0      	cmp	r3, #192	; 0xc0
 8003304:	d814      	bhi.n	8003330 <UART_SetConfig+0x1c0>
 8003306:	2b80      	cmp	r3, #128	; 0x80
 8003308:	d009      	beq.n	800331e <UART_SetConfig+0x1ae>
 800330a:	2b80      	cmp	r3, #128	; 0x80
 800330c:	d810      	bhi.n	8003330 <UART_SetConfig+0x1c0>
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <UART_SetConfig+0x1a8>
 8003312:	2b40      	cmp	r3, #64	; 0x40
 8003314:	d006      	beq.n	8003324 <UART_SetConfig+0x1b4>
 8003316:	e00b      	b.n	8003330 <UART_SetConfig+0x1c0>
 8003318:	2300      	movs	r3, #0
 800331a:	77fb      	strb	r3, [r7, #31]
 800331c:	e0cc      	b.n	80034b8 <UART_SetConfig+0x348>
 800331e:	2302      	movs	r3, #2
 8003320:	77fb      	strb	r3, [r7, #31]
 8003322:	e0c9      	b.n	80034b8 <UART_SetConfig+0x348>
 8003324:	2304      	movs	r3, #4
 8003326:	77fb      	strb	r3, [r7, #31]
 8003328:	e0c6      	b.n	80034b8 <UART_SetConfig+0x348>
 800332a:	2308      	movs	r3, #8
 800332c:	77fb      	strb	r3, [r7, #31]
 800332e:	e0c3      	b.n	80034b8 <UART_SetConfig+0x348>
 8003330:	2310      	movs	r3, #16
 8003332:	77fb      	strb	r3, [r7, #31]
 8003334:	e0c0      	b.n	80034b8 <UART_SetConfig+0x348>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a44      	ldr	r2, [pc, #272]	; (800344c <UART_SetConfig+0x2dc>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d125      	bne.n	800338c <UART_SetConfig+0x21c>
 8003340:	4b3e      	ldr	r3, [pc, #248]	; (800343c <UART_SetConfig+0x2cc>)
 8003342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800334a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800334e:	d017      	beq.n	8003380 <UART_SetConfig+0x210>
 8003350:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003354:	d817      	bhi.n	8003386 <UART_SetConfig+0x216>
 8003356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800335a:	d00b      	beq.n	8003374 <UART_SetConfig+0x204>
 800335c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003360:	d811      	bhi.n	8003386 <UART_SetConfig+0x216>
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <UART_SetConfig+0x1fe>
 8003366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800336a:	d006      	beq.n	800337a <UART_SetConfig+0x20a>
 800336c:	e00b      	b.n	8003386 <UART_SetConfig+0x216>
 800336e:	2300      	movs	r3, #0
 8003370:	77fb      	strb	r3, [r7, #31]
 8003372:	e0a1      	b.n	80034b8 <UART_SetConfig+0x348>
 8003374:	2302      	movs	r3, #2
 8003376:	77fb      	strb	r3, [r7, #31]
 8003378:	e09e      	b.n	80034b8 <UART_SetConfig+0x348>
 800337a:	2304      	movs	r3, #4
 800337c:	77fb      	strb	r3, [r7, #31]
 800337e:	e09b      	b.n	80034b8 <UART_SetConfig+0x348>
 8003380:	2308      	movs	r3, #8
 8003382:	77fb      	strb	r3, [r7, #31]
 8003384:	e098      	b.n	80034b8 <UART_SetConfig+0x348>
 8003386:	2310      	movs	r3, #16
 8003388:	77fb      	strb	r3, [r7, #31]
 800338a:	e095      	b.n	80034b8 <UART_SetConfig+0x348>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a2f      	ldr	r2, [pc, #188]	; (8003450 <UART_SetConfig+0x2e0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d125      	bne.n	80033e2 <UART_SetConfig+0x272>
 8003396:	4b29      	ldr	r3, [pc, #164]	; (800343c <UART_SetConfig+0x2cc>)
 8003398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80033a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033a4:	d017      	beq.n	80033d6 <UART_SetConfig+0x266>
 80033a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033aa:	d817      	bhi.n	80033dc <UART_SetConfig+0x26c>
 80033ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033b0:	d00b      	beq.n	80033ca <UART_SetConfig+0x25a>
 80033b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033b6:	d811      	bhi.n	80033dc <UART_SetConfig+0x26c>
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <UART_SetConfig+0x254>
 80033bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033c0:	d006      	beq.n	80033d0 <UART_SetConfig+0x260>
 80033c2:	e00b      	b.n	80033dc <UART_SetConfig+0x26c>
 80033c4:	2301      	movs	r3, #1
 80033c6:	77fb      	strb	r3, [r7, #31]
 80033c8:	e076      	b.n	80034b8 <UART_SetConfig+0x348>
 80033ca:	2302      	movs	r3, #2
 80033cc:	77fb      	strb	r3, [r7, #31]
 80033ce:	e073      	b.n	80034b8 <UART_SetConfig+0x348>
 80033d0:	2304      	movs	r3, #4
 80033d2:	77fb      	strb	r3, [r7, #31]
 80033d4:	e070      	b.n	80034b8 <UART_SetConfig+0x348>
 80033d6:	2308      	movs	r3, #8
 80033d8:	77fb      	strb	r3, [r7, #31]
 80033da:	e06d      	b.n	80034b8 <UART_SetConfig+0x348>
 80033dc:	2310      	movs	r3, #16
 80033de:	77fb      	strb	r3, [r7, #31]
 80033e0:	e06a      	b.n	80034b8 <UART_SetConfig+0x348>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a1b      	ldr	r2, [pc, #108]	; (8003454 <UART_SetConfig+0x2e4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d138      	bne.n	800345e <UART_SetConfig+0x2ee>
 80033ec:	4b13      	ldr	r3, [pc, #76]	; (800343c <UART_SetConfig+0x2cc>)
 80033ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80033f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033fa:	d017      	beq.n	800342c <UART_SetConfig+0x2bc>
 80033fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003400:	d82a      	bhi.n	8003458 <UART_SetConfig+0x2e8>
 8003402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003406:	d00b      	beq.n	8003420 <UART_SetConfig+0x2b0>
 8003408:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800340c:	d824      	bhi.n	8003458 <UART_SetConfig+0x2e8>
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <UART_SetConfig+0x2aa>
 8003412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003416:	d006      	beq.n	8003426 <UART_SetConfig+0x2b6>
 8003418:	e01e      	b.n	8003458 <UART_SetConfig+0x2e8>
 800341a:	2300      	movs	r3, #0
 800341c:	77fb      	strb	r3, [r7, #31]
 800341e:	e04b      	b.n	80034b8 <UART_SetConfig+0x348>
 8003420:	2302      	movs	r3, #2
 8003422:	77fb      	strb	r3, [r7, #31]
 8003424:	e048      	b.n	80034b8 <UART_SetConfig+0x348>
 8003426:	2304      	movs	r3, #4
 8003428:	77fb      	strb	r3, [r7, #31]
 800342a:	e045      	b.n	80034b8 <UART_SetConfig+0x348>
 800342c:	2308      	movs	r3, #8
 800342e:	77fb      	strb	r3, [r7, #31]
 8003430:	e042      	b.n	80034b8 <UART_SetConfig+0x348>
 8003432:	bf00      	nop
 8003434:	efff69f3 	.word	0xefff69f3
 8003438:	40011000 	.word	0x40011000
 800343c:	40023800 	.word	0x40023800
 8003440:	40004400 	.word	0x40004400
 8003444:	40004800 	.word	0x40004800
 8003448:	40004c00 	.word	0x40004c00
 800344c:	40005000 	.word	0x40005000
 8003450:	40011400 	.word	0x40011400
 8003454:	40007800 	.word	0x40007800
 8003458:	2310      	movs	r3, #16
 800345a:	77fb      	strb	r3, [r7, #31]
 800345c:	e02c      	b.n	80034b8 <UART_SetConfig+0x348>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a72      	ldr	r2, [pc, #456]	; (800362c <UART_SetConfig+0x4bc>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d125      	bne.n	80034b4 <UART_SetConfig+0x344>
 8003468:	4b71      	ldr	r3, [pc, #452]	; (8003630 <UART_SetConfig+0x4c0>)
 800346a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003472:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003476:	d017      	beq.n	80034a8 <UART_SetConfig+0x338>
 8003478:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800347c:	d817      	bhi.n	80034ae <UART_SetConfig+0x33e>
 800347e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003482:	d00b      	beq.n	800349c <UART_SetConfig+0x32c>
 8003484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003488:	d811      	bhi.n	80034ae <UART_SetConfig+0x33e>
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <UART_SetConfig+0x326>
 800348e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003492:	d006      	beq.n	80034a2 <UART_SetConfig+0x332>
 8003494:	e00b      	b.n	80034ae <UART_SetConfig+0x33e>
 8003496:	2300      	movs	r3, #0
 8003498:	77fb      	strb	r3, [r7, #31]
 800349a:	e00d      	b.n	80034b8 <UART_SetConfig+0x348>
 800349c:	2302      	movs	r3, #2
 800349e:	77fb      	strb	r3, [r7, #31]
 80034a0:	e00a      	b.n	80034b8 <UART_SetConfig+0x348>
 80034a2:	2304      	movs	r3, #4
 80034a4:	77fb      	strb	r3, [r7, #31]
 80034a6:	e007      	b.n	80034b8 <UART_SetConfig+0x348>
 80034a8:	2308      	movs	r3, #8
 80034aa:	77fb      	strb	r3, [r7, #31]
 80034ac:	e004      	b.n	80034b8 <UART_SetConfig+0x348>
 80034ae:	2310      	movs	r3, #16
 80034b0:	77fb      	strb	r3, [r7, #31]
 80034b2:	e001      	b.n	80034b8 <UART_SetConfig+0x348>
 80034b4:	2310      	movs	r3, #16
 80034b6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c0:	d15b      	bne.n	800357a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80034c2:	7ffb      	ldrb	r3, [r7, #31]
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d828      	bhi.n	800351a <UART_SetConfig+0x3aa>
 80034c8:	a201      	add	r2, pc, #4	; (adr r2, 80034d0 <UART_SetConfig+0x360>)
 80034ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ce:	bf00      	nop
 80034d0:	080034f5 	.word	0x080034f5
 80034d4:	080034fd 	.word	0x080034fd
 80034d8:	08003505 	.word	0x08003505
 80034dc:	0800351b 	.word	0x0800351b
 80034e0:	0800350b 	.word	0x0800350b
 80034e4:	0800351b 	.word	0x0800351b
 80034e8:	0800351b 	.word	0x0800351b
 80034ec:	0800351b 	.word	0x0800351b
 80034f0:	08003513 	.word	0x08003513
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034f4:	f7fe fe7c 	bl	80021f0 <HAL_RCC_GetPCLK1Freq>
 80034f8:	61b8      	str	r0, [r7, #24]
        break;
 80034fa:	e013      	b.n	8003524 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034fc:	f7fe fe8c 	bl	8002218 <HAL_RCC_GetPCLK2Freq>
 8003500:	61b8      	str	r0, [r7, #24]
        break;
 8003502:	e00f      	b.n	8003524 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003504:	4b4b      	ldr	r3, [pc, #300]	; (8003634 <UART_SetConfig+0x4c4>)
 8003506:	61bb      	str	r3, [r7, #24]
        break;
 8003508:	e00c      	b.n	8003524 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800350a:	f7fe fd5f 	bl	8001fcc <HAL_RCC_GetSysClockFreq>
 800350e:	61b8      	str	r0, [r7, #24]
        break;
 8003510:	e008      	b.n	8003524 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003516:	61bb      	str	r3, [r7, #24]
        break;
 8003518:	e004      	b.n	8003524 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800351a:	2300      	movs	r3, #0
 800351c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	77bb      	strb	r3, [r7, #30]
        break;
 8003522:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d074      	beq.n	8003614 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	005a      	lsls	r2, r3, #1
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	085b      	lsrs	r3, r3, #1
 8003534:	441a      	add	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	fbb2 f3f3 	udiv	r3, r2, r3
 800353e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	2b0f      	cmp	r3, #15
 8003544:	d916      	bls.n	8003574 <UART_SetConfig+0x404>
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354c:	d212      	bcs.n	8003574 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	b29b      	uxth	r3, r3
 8003552:	f023 030f 	bic.w	r3, r3, #15
 8003556:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	085b      	lsrs	r3, r3, #1
 800355c:	b29b      	uxth	r3, r3
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	b29a      	uxth	r2, r3
 8003564:	89fb      	ldrh	r3, [r7, #14]
 8003566:	4313      	orrs	r3, r2
 8003568:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	89fa      	ldrh	r2, [r7, #14]
 8003570:	60da      	str	r2, [r3, #12]
 8003572:	e04f      	b.n	8003614 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	77bb      	strb	r3, [r7, #30]
 8003578:	e04c      	b.n	8003614 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800357a:	7ffb      	ldrb	r3, [r7, #31]
 800357c:	2b08      	cmp	r3, #8
 800357e:	d828      	bhi.n	80035d2 <UART_SetConfig+0x462>
 8003580:	a201      	add	r2, pc, #4	; (adr r2, 8003588 <UART_SetConfig+0x418>)
 8003582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003586:	bf00      	nop
 8003588:	080035ad 	.word	0x080035ad
 800358c:	080035b5 	.word	0x080035b5
 8003590:	080035bd 	.word	0x080035bd
 8003594:	080035d3 	.word	0x080035d3
 8003598:	080035c3 	.word	0x080035c3
 800359c:	080035d3 	.word	0x080035d3
 80035a0:	080035d3 	.word	0x080035d3
 80035a4:	080035d3 	.word	0x080035d3
 80035a8:	080035cb 	.word	0x080035cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035ac:	f7fe fe20 	bl	80021f0 <HAL_RCC_GetPCLK1Freq>
 80035b0:	61b8      	str	r0, [r7, #24]
        break;
 80035b2:	e013      	b.n	80035dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035b4:	f7fe fe30 	bl	8002218 <HAL_RCC_GetPCLK2Freq>
 80035b8:	61b8      	str	r0, [r7, #24]
        break;
 80035ba:	e00f      	b.n	80035dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035bc:	4b1d      	ldr	r3, [pc, #116]	; (8003634 <UART_SetConfig+0x4c4>)
 80035be:	61bb      	str	r3, [r7, #24]
        break;
 80035c0:	e00c      	b.n	80035dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035c2:	f7fe fd03 	bl	8001fcc <HAL_RCC_GetSysClockFreq>
 80035c6:	61b8      	str	r0, [r7, #24]
        break;
 80035c8:	e008      	b.n	80035dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035ce:	61bb      	str	r3, [r7, #24]
        break;
 80035d0:	e004      	b.n	80035dc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	77bb      	strb	r3, [r7, #30]
        break;
 80035da:	bf00      	nop
    }

    if (pclk != 0U)
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d018      	beq.n	8003614 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	085a      	lsrs	r2, r3, #1
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	441a      	add	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	2b0f      	cmp	r3, #15
 80035fa:	d909      	bls.n	8003610 <UART_SetConfig+0x4a0>
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003602:	d205      	bcs.n	8003610 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	b29a      	uxth	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60da      	str	r2, [r3, #12]
 800360e:	e001      	b.n	8003614 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003620:	7fbb      	ldrb	r3, [r7, #30]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3720      	adds	r7, #32
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40007c00 	.word	0x40007c00
 8003630:	40023800 	.word	0x40023800
 8003634:	00f42400 	.word	0x00f42400

08003638 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00a      	beq.n	8003684 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00a      	beq.n	80036a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00a      	beq.n	80036c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00a      	beq.n	80036ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003714:	2b00      	cmp	r3, #0
 8003716:	d01a      	beq.n	800374e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003736:	d10a      	bne.n	800374e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	605a      	str	r2, [r3, #4]
  }
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af02      	add	r7, sp, #8
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800378c:	f7fd fc5a 	bl	8001044 <HAL_GetTick>
 8003790:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b08      	cmp	r3, #8
 800379e:	d10e      	bne.n	80037be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f81b 	bl	80037ea <UART_WaitOnFlagUntilTimeout>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e011      	b.n	80037e2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2220      	movs	r2, #32
 80037c2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b09c      	sub	sp, #112	; 0x70
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	60f8      	str	r0, [r7, #12]
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	603b      	str	r3, [r7, #0]
 80037f6:	4613      	mov	r3, r2
 80037f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037fa:	e0a7      	b.n	800394c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003802:	f000 80a3 	beq.w	800394c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003806:	f7fd fc1d 	bl	8001044 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003812:	429a      	cmp	r2, r3
 8003814:	d302      	bcc.n	800381c <UART_WaitOnFlagUntilTimeout+0x32>
 8003816:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003818:	2b00      	cmp	r3, #0
 800381a:	d13f      	bne.n	800389c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003824:	e853 3f00 	ldrex	r3, [r3]
 8003828:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800382a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800382c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003830:	667b      	str	r3, [r7, #100]	; 0x64
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800383a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800383c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003840:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003842:	e841 2300 	strex	r3, r2, [r1]
 8003846:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1e6      	bne.n	800381c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3308      	adds	r3, #8
 8003854:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003858:	e853 3f00 	ldrex	r3, [r3]
 800385c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800385e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003860:	f023 0301 	bic.w	r3, r3, #1
 8003864:	663b      	str	r3, [r7, #96]	; 0x60
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	3308      	adds	r3, #8
 800386c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800386e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003870:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003872:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003874:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003876:	e841 2300 	strex	r3, r2, [r1]
 800387a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800387c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1e5      	bne.n	800384e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2220      	movs	r2, #32
 8003886:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2220      	movs	r2, #32
 800388c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e068      	b.n	800396e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0304 	and.w	r3, r3, #4
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d050      	beq.n	800394c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038b8:	d148      	bne.n	800394c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038c2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038cc:	e853 3f00 	ldrex	r3, [r3]
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e2:	637b      	str	r3, [r7, #52]	; 0x34
 80038e4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038ea:	e841 2300 	strex	r3, r2, [r1]
 80038ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1e6      	bne.n	80038c4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	3308      	adds	r3, #8
 80038fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	e853 3f00 	ldrex	r3, [r3]
 8003904:	613b      	str	r3, [r7, #16]
   return(result);
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f023 0301 	bic.w	r3, r3, #1
 800390c:	66bb      	str	r3, [r7, #104]	; 0x68
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	3308      	adds	r3, #8
 8003914:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003916:	623a      	str	r2, [r7, #32]
 8003918:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391a:	69f9      	ldr	r1, [r7, #28]
 800391c:	6a3a      	ldr	r2, [r7, #32]
 800391e:	e841 2300 	strex	r3, r2, [r1]
 8003922:	61bb      	str	r3, [r7, #24]
   return(result);
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1e5      	bne.n	80038f6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2220      	movs	r2, #32
 8003934:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2220      	movs	r2, #32
 800393c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e010      	b.n	800396e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	69da      	ldr	r2, [r3, #28]
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	4013      	ands	r3, r2
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	429a      	cmp	r2, r3
 800395a:	bf0c      	ite	eq
 800395c:	2301      	moveq	r3, #1
 800395e:	2300      	movne	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	461a      	mov	r2, r3
 8003964:	79fb      	ldrb	r3, [r7, #7]
 8003966:	429a      	cmp	r2, r3
 8003968:	f43f af48 	beq.w	80037fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3770      	adds	r7, #112	; 0x70
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003978:	b084      	sub	sp, #16
 800397a:	b580      	push	{r7, lr}
 800397c:	b084      	sub	sp, #16
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	f107 001c 	add.w	r0, r7, #28
 8003986:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800398a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398c:	2b01      	cmp	r3, #1
 800398e:	d120      	bne.n	80039d2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003994:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	4b20      	ldr	r3, [pc, #128]	; (8003a24 <USB_CoreInit+0xac>)
 80039a2:	4013      	ands	r3, r2
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80039b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d105      	bne.n	80039c6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fa96 	bl	8003ef8 <USB_CoreReset>
 80039cc:	4603      	mov	r3, r0
 80039ce:	73fb      	strb	r3, [r7, #15]
 80039d0:	e010      	b.n	80039f4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 fa8a 	bl	8003ef8 <USB_CoreReset>
 80039e4:	4603      	mov	r3, r0
 80039e6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80039f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d10b      	bne.n	8003a12 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f043 0206 	orr.w	r2, r3, #6
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f043 0220 	orr.w	r2, r3, #32
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a1e:	b004      	add	sp, #16
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	ffbdffbf 	.word	0xffbdffbf

08003a28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f023 0201 	bic.w	r2, r3, #1
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	460b      	mov	r3, r1
 8003a54:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003a66:	78fb      	ldrb	r3, [r7, #3]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d115      	bne.n	8003a98 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a78:	2001      	movs	r0, #1
 8003a7a:	f7fd faef 	bl	800105c <HAL_Delay>
      ms++;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	3301      	adds	r3, #1
 8003a82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 fa29 	bl	8003edc <USB_GetMode>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d01e      	beq.n	8003ace <USB_SetCurrentMode+0x84>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2b31      	cmp	r3, #49	; 0x31
 8003a94:	d9f0      	bls.n	8003a78 <USB_SetCurrentMode+0x2e>
 8003a96:	e01a      	b.n	8003ace <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d115      	bne.n	8003aca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003aaa:	2001      	movs	r0, #1
 8003aac:	f7fd fad6 	bl	800105c <HAL_Delay>
      ms++;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 fa10 	bl	8003edc <USB_GetMode>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d005      	beq.n	8003ace <USB_SetCurrentMode+0x84>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2b31      	cmp	r3, #49	; 0x31
 8003ac6:	d9f0      	bls.n	8003aaa <USB_SetCurrentMode+0x60>
 8003ac8:	e001      	b.n	8003ace <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e005      	b.n	8003ada <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2b32      	cmp	r3, #50	; 0x32
 8003ad2:	d101      	bne.n	8003ad8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e000      	b.n	8003ada <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ae4:	b084      	sub	sp, #16
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b086      	sub	sp, #24
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003af2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003afe:	2300      	movs	r3, #0
 8003b00:	613b      	str	r3, [r7, #16]
 8003b02:	e009      	b.n	8003b18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	3340      	adds	r3, #64	; 0x40
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	2200      	movs	r2, #0
 8003b10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	3301      	adds	r3, #1
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	2b0e      	cmp	r3, #14
 8003b1c:	d9f2      	bls.n	8003b04 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d11c      	bne.n	8003b5e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b32:	f043 0302 	orr.w	r3, r3, #2
 8003b36:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	e005      	b.n	8003b6a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b62:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b70:	461a      	mov	r2, r3
 8003b72:	2300      	movs	r3, #0
 8003b74:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b84:	461a      	mov	r2, r3
 8003b86:	680b      	ldr	r3, [r1, #0]
 8003b88:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d10c      	bne.n	8003baa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d104      	bne.n	8003ba0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b96:	2100      	movs	r1, #0
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f965 	bl	8003e68 <USB_SetDevSpeed>
 8003b9e:	e008      	b.n	8003bb2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f960 	bl	8003e68 <USB_SetDevSpeed>
 8003ba8:	e003      	b.n	8003bb2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003baa:	2103      	movs	r1, #3
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f95b 	bl	8003e68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003bb2:	2110      	movs	r1, #16
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f8f3 	bl	8003da0 <USB_FlushTxFifo>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f91f 	bl	8003e08 <USB_FlushRxFifo>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bda:	461a      	mov	r2, r3
 8003bdc:	2300      	movs	r3, #0
 8003bde:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be6:	461a      	mov	r2, r3
 8003be8:	2300      	movs	r3, #0
 8003bea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	613b      	str	r3, [r7, #16]
 8003bfc:	e043      	b.n	8003c86 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c14:	d118      	bne.n	8003c48 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10a      	bne.n	8003c32 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c28:	461a      	mov	r2, r3
 8003c2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c2e:	6013      	str	r3, [r2, #0]
 8003c30:	e013      	b.n	8003c5a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c3e:	461a      	mov	r2, r3
 8003c40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	e008      	b.n	8003c5a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c54:	461a      	mov	r2, r3
 8003c56:	2300      	movs	r3, #0
 8003c58:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	015a      	lsls	r2, r3, #5
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4413      	add	r3, r2
 8003c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c66:	461a      	mov	r2, r3
 8003c68:	2300      	movs	r3, #0
 8003c6a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	015a      	lsls	r2, r3, #5
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c78:	461a      	mov	r2, r3
 8003c7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	3301      	adds	r3, #1
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d3b7      	bcc.n	8003bfe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c8e:	2300      	movs	r3, #0
 8003c90:	613b      	str	r3, [r7, #16]
 8003c92:	e043      	b.n	8003d1c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ca6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003caa:	d118      	bne.n	8003cde <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10a      	bne.n	8003cc8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	e013      	b.n	8003cf0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	015a      	lsls	r2, r3, #5
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	e008      	b.n	8003cf0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cea:	461a      	mov	r2, r3
 8003cec:	2300      	movs	r3, #0
 8003cee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	2300      	movs	r3, #0
 8003d00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	015a      	lsls	r2, r3, #5
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0e:	461a      	mov	r2, r3
 8003d10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	613b      	str	r3, [r7, #16]
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d3b7      	bcc.n	8003c94 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d36:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003d44:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d105      	bne.n	8003d58 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	f043 0210 	orr.w	r2, r3, #16
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699a      	ldr	r2, [r3, #24]
 8003d5c:	4b0e      	ldr	r3, [pc, #56]	; (8003d98 <USB_DevInit+0x2b4>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d005      	beq.n	8003d76 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	f043 0208 	orr.w	r2, r3, #8
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d105      	bne.n	8003d88 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	699a      	ldr	r2, [r3, #24]
 8003d80:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <USB_DevInit+0x2b8>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d94:	b004      	add	sp, #16
 8003d96:	4770      	bx	lr
 8003d98:	803c3800 	.word	0x803c3800
 8003d9c:	40000004 	.word	0x40000004

08003da0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	3301      	adds	r3, #1
 8003db2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4a13      	ldr	r2, [pc, #76]	; (8003e04 <USB_FlushTxFifo+0x64>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d901      	bls.n	8003dc0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e01b      	b.n	8003df8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	daf2      	bge.n	8003dae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	019b      	lsls	r3, r3, #6
 8003dd0:	f043 0220 	orr.w	r2, r3, #32
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4a08      	ldr	r2, [pc, #32]	; (8003e04 <USB_FlushTxFifo+0x64>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d901      	bls.n	8003dea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e006      	b.n	8003df8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f003 0320 	and.w	r3, r3, #32
 8003df2:	2b20      	cmp	r3, #32
 8003df4:	d0f0      	beq.n	8003dd8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	00030d40 	.word	0x00030d40

08003e08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3301      	adds	r3, #1
 8003e18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4a11      	ldr	r2, [pc, #68]	; (8003e64 <USB_FlushRxFifo+0x5c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d901      	bls.n	8003e26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e018      	b.n	8003e58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	daf2      	bge.n	8003e14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2210      	movs	r2, #16
 8003e36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4a08      	ldr	r2, [pc, #32]	; (8003e64 <USB_FlushRxFifo+0x5c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d901      	bls.n	8003e4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e006      	b.n	8003e58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f003 0310 	and.w	r3, r3, #16
 8003e52:	2b10      	cmp	r3, #16
 8003e54:	d0f0      	beq.n	8003e38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	00030d40 	.word	0x00030d40

08003e68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	78fb      	ldrb	r3, [r7, #3]
 8003e82:	68f9      	ldr	r1, [r7, #12]
 8003e84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b085      	sub	sp, #20
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003eb4:	f023 0303 	bic.w	r3, r3, #3
 8003eb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ec8:	f043 0302 	orr.w	r3, r3, #2
 8003ecc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	3301      	adds	r3, #1
 8003f08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	4a13      	ldr	r2, [pc, #76]	; (8003f5c <USB_CoreReset+0x64>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d901      	bls.n	8003f16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e01b      	b.n	8003f4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	daf2      	bge.n	8003f04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f043 0201 	orr.w	r2, r3, #1
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	3301      	adds	r3, #1
 8003f32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4a09      	ldr	r2, [pc, #36]	; (8003f5c <USB_CoreReset+0x64>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d901      	bls.n	8003f40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e006      	b.n	8003f4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d0f0      	beq.n	8003f2e <USB_CoreReset+0x36>

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	00030d40 	.word	0x00030d40

08003f60 <__libc_init_array>:
 8003f60:	b570      	push	{r4, r5, r6, lr}
 8003f62:	4d0d      	ldr	r5, [pc, #52]	; (8003f98 <__libc_init_array+0x38>)
 8003f64:	4c0d      	ldr	r4, [pc, #52]	; (8003f9c <__libc_init_array+0x3c>)
 8003f66:	1b64      	subs	r4, r4, r5
 8003f68:	10a4      	asrs	r4, r4, #2
 8003f6a:	2600      	movs	r6, #0
 8003f6c:	42a6      	cmp	r6, r4
 8003f6e:	d109      	bne.n	8003f84 <__libc_init_array+0x24>
 8003f70:	4d0b      	ldr	r5, [pc, #44]	; (8003fa0 <__libc_init_array+0x40>)
 8003f72:	4c0c      	ldr	r4, [pc, #48]	; (8003fa4 <__libc_init_array+0x44>)
 8003f74:	f000 f820 	bl	8003fb8 <_init>
 8003f78:	1b64      	subs	r4, r4, r5
 8003f7a:	10a4      	asrs	r4, r4, #2
 8003f7c:	2600      	movs	r6, #0
 8003f7e:	42a6      	cmp	r6, r4
 8003f80:	d105      	bne.n	8003f8e <__libc_init_array+0x2e>
 8003f82:	bd70      	pop	{r4, r5, r6, pc}
 8003f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f88:	4798      	blx	r3
 8003f8a:	3601      	adds	r6, #1
 8003f8c:	e7ee      	b.n	8003f6c <__libc_init_array+0xc>
 8003f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f92:	4798      	blx	r3
 8003f94:	3601      	adds	r6, #1
 8003f96:	e7f2      	b.n	8003f7e <__libc_init_array+0x1e>
 8003f98:	08004000 	.word	0x08004000
 8003f9c:	08004000 	.word	0x08004000
 8003fa0:	08004000 	.word	0x08004000
 8003fa4:	08004004 	.word	0x08004004

08003fa8 <memset>:
 8003fa8:	4402      	add	r2, r0
 8003faa:	4603      	mov	r3, r0
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d100      	bne.n	8003fb2 <memset+0xa>
 8003fb0:	4770      	bx	lr
 8003fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8003fb6:	e7f9      	b.n	8003fac <memset+0x4>

08003fb8 <_init>:
 8003fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fba:	bf00      	nop
 8003fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fbe:	bc08      	pop	{r3}
 8003fc0:	469e      	mov	lr, r3
 8003fc2:	4770      	bx	lr

08003fc4 <_fini>:
 8003fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc6:	bf00      	nop
 8003fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fca:	bc08      	pop	{r3}
 8003fcc:	469e      	mov	lr, r3
 8003fce:	4770      	bx	lr
